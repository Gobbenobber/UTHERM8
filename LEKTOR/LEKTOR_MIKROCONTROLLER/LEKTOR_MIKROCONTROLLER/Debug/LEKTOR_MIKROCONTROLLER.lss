
LEKTOR_MIKROCONTROLLER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000216  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a32  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000793  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000385  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000408  00000000  00000000  00001944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ee  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000213a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  9e:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SendCharSW>:
{
	// Main-loop: Toggle LED7 hvert sekund
	unsigned char i;
	unsigned char x = Tegn;
	// Start bit
	PORT &= ~(1<<PINNR);
  a6:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2a e2       	ldi	r18, 0x2A	; 42
  aa:	2a 95       	dec	r18
  ac:	f1 f7       	brne	.-4      	; 0xaa <SendCharSW+0x4>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <SendCharSW+0xa>
  b0:	98 e0       	ldi	r25, 0x08	; 8
	_delay_us(NO_us);
	// 8 data bits (LSB first)
	for (i = 0; i<8; i++)
	{
		if(x & 0b00000001)
  b2:	80 ff       	sbrs	r24, 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <SendCharSW+0x14>
		PORT |= (1<<PINNR);
  b6:	28 9a       	sbi	0x05, 0	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <SendCharSW+0x16>
		else
		PORT &= ~(1<<PINNR);
  ba:	28 98       	cbi	0x05, 0	; 5
  bc:	2a e2       	ldi	r18, 0x2A	; 42
  be:	2a 95       	dec	r18
  c0:	f1 f7       	brne	.-4      	; 0xbe <SendCharSW+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <SendCharSW+0x1e>
		_delay_us(NO_us);
		x = x>>1;
  c4:	86 95       	lsr	r24
  c6:	91 50       	subi	r25, 0x01	; 1
	unsigned char x = Tegn;
	// Start bit
	PORT &= ~(1<<PINNR);
	_delay_us(NO_us);
	// 8 data bits (LSB first)
	for (i = 0; i<8; i++)
  c8:	a1 f7       	brne	.-24     	; 0xb2 <SendCharSW+0xc>
		else
		PORT &= ~(1<<PINNR);
		_delay_us(NO_us);
		x = x>>1;
	}
	PORT |= (1<<PINNR);
  ca:	28 9a       	sbi	0x05, 0	; 5
  cc:	8a e2       	ldi	r24, 0x2A	; 42
  ce:	8a 95       	dec	r24
  d0:	f1 f7       	brne	.-4      	; 0xce <SendCharSW+0x28>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <SendCharSW+0x2e>
	_delay_us(NO_us);
	//Test ###DUNNO what the stopbit is###
	PORT &= ~(1<<PINNR);
  d4:	28 98       	cbi	0x05, 0	; 5
  d6:	08 95       	ret

000000d8 <ReadCharSW>:
  d8:	8a e2       	ldi	r24, 0x2A	; 42
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <ReadCharSW+0x2>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <ReadCharSW+0x8>
  e0:	88 e0       	ldi	r24, 0x08	; 8
  e2:	9a e2       	ldi	r25, 0x2A	; 42
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <ReadCharSW+0xc>
  e8:	00 c0       	rjmp	.+0      	; 0xea <ReadCharSW+0x12>
  ea:	81 50       	subi	r24, 0x01	; 1
	
	//STARTBIT
	if (PINNR_2 != 0);
	{
		//Data
		for (i = 8; i > 0; --i)
  ec:	d1 f7       	brne	.-12     	; 0xe2 <ReadCharSW+0xa>
  ee:	8a e2       	ldi	r24, 0x2A	; 42
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <ReadCharSW+0x18>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <ReadCharSW+0x1e>
	{
		_delay_us(NO_us);
		printf("ERROR! STOPBIT IS FUKT");
	}
	_delay_us(NO_us);
}
  f6:	08 95       	ret

000000f8 <main>:
int main(void)
{
	//------------------------------------//
	//			 interrupt test			  //
	//------------------------------------//
	DDRD &= ~(1 << DDD2);     // Clear the PD2 pin (Nr. 2)
  f8:	52 98       	cbi	0x0a, 2	; 10
	// PD2 (PCINT0 pin) is now an input

	PORTD |= (1 << PORTD2);    // turn On the Pull-up
  fa:	5a 9a       	sbi	0x0b, 2	; 11
	// PD2 is now an input with pull-up enabled

	//EICRA |= (1 << ISC11) | (1 << ISC10);   // set INT0 to trigger on ANY logic change
	EICRA = 0b00000011;
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK |= (1 << INT0);     // Turns on INT0
 102:	e8 9a       	sbi	0x1d, 0	; 29
	//------------------------------------//

	//TEST AF PIN
	DDRC |= 1 << 0;
 104:	38 9a       	sbi	0x07, 0	; 7

	//Initializing
	unsigned char* streng = "000";
	UCSR0B = 0;
 106:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	DDR |= (1<<PINNR);
 10a:	20 9a       	sbi	0x04, 0	; 4
	DDR |= (1 << PINNR_2);
 10c:	84 b1       	in	r24, 0x04	; 4
 10e:	84 b9       	out	0x04, r24	; 4

	// Global interrupt enable
	sei();
 110:	78 94       	sei
		PORTC &= ~(1 << 0);
		_delay_ms(1);

		for (int i = 0; i < 3; i++)
		{
			streng[i] = karakter;
 112:	c1 e0       	ldi	r28, 0x01	; 1
 114:	d1 e0       	ldi	r29, 0x01	; 1
 116:	0c 2f       	mov	r16, r28
 118:	1d 2f       	mov	r17, r29

		//testOutput
		printf("%s\n", streng);
		if (streng == "aaa")
		{
			PORTB = 255;
 11a:	ff 24       	eor	r15, r15
 11c:	fa 94       	dec	r15
	sei();

	while(1)
	{
		//ZEROCROSS TEST
		PORTC |= 1 << 0;
 11e:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e9       	ldi	r24, 0x9F	; 159
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x2c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x32>
 12a:	00 00       	nop
		_delay_ms(1);
		PORTC &= ~(1 << 0);
 12c:	40 98       	cbi	0x08, 0	; 8
 12e:	8f e9       	ldi	r24, 0x9F	; 159
 130:	9f e0       	ldi	r25, 0x0F	; 15
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x3a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x40>
 138:	00 00       	nop
		_delay_ms(1);

		for (int i = 0; i < 3; i++)
		{
			streng[i] = karakter;
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 13e:	88 83       	st	Y, r24
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14a:	8a 83       	std	Y+2, r24	; 0x02
		}

		//testOutput
		printf("%s\n", streng);
 14c:	80 2f       	mov	r24, r16
 14e:	91 2f       	mov	r25, r17
 150:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <puts>
		if (streng == "aaa")
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	c5 30       	cpi	r28, 0x05	; 5
 158:	d9 07       	cpc	r29, r25
 15a:	09 f7       	brne	.-62     	; 0x11e <main+0x26>
		{
			PORTB = 255;
 15c:	f5 b8       	out	0x05, r15	; 5
 15e:	df cf       	rjmp	.-66     	; 0x11e <main+0x26>

00000160 <__vector_1>:
	}
}

// Interrupt service routine for INT0 (Er INT3 for Atmega 2560)
ISR (INT0_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	// Test Write
	SendCharSW('a');
 182:	81 e6       	ldi	r24, 0x61	; 97
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <SendCharSW>

	// Test Read
	karakter = ReadCharSW();
 188:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadCharSW>
 18c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <puts>:
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end+0x2>
 1be:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__data_end+0x3>
 1c2:	23 81       	ldd	r18, Z+3	; 0x03
 1c4:	21 ff       	sbrs	r18, 1
 1c6:	1b c0       	rjmp	.+54     	; 0x1fe <puts+0x4c>
 1c8:	8c 01       	movw	r16, r24
 1ca:	d0 e0       	ldi	r29, 0x00	; 0
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	f8 01       	movw	r30, r16
 1d0:	81 91       	ld	r24, Z+
 1d2:	8f 01       	movw	r16, r30
 1d4:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <__data_end+0x2>
 1d8:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <__data_end+0x3>
 1dc:	db 01       	movw	r26, r22
 1de:	18 96       	adiw	r26, 0x08	; 8
 1e0:	ed 91       	ld	r30, X+
 1e2:	fc 91       	ld	r31, X
 1e4:	19 97       	sbiw	r26, 0x09	; 9
 1e6:	88 23       	and	r24, r24
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <puts+0x44>
 1ea:	09 95       	icall
 1ec:	89 2b       	or	r24, r25
 1ee:	79 f3       	breq	.-34     	; 0x1ce <puts+0x1c>
 1f0:	df ef       	ldi	r29, 0xFF	; 255
 1f2:	cf ef       	ldi	r28, 0xFF	; 255
 1f4:	ec cf       	rjmp	.-40     	; 0x1ce <puts+0x1c>
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	09 95       	icall
 1fa:	89 2b       	or	r24, r25
 1fc:	19 f0       	breq	.+6      	; 0x204 <puts+0x52>
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	9f ef       	ldi	r25, 0xFF	; 255
 202:	02 c0       	rjmp	.+4      	; 0x208 <puts+0x56>
 204:	8d 2f       	mov	r24, r29
 206:	9c 2f       	mov	r25, r28
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
