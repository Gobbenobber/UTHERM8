
Panel_release.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  0000029e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001233  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ed1  00000000  00000000  0000165f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000819  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000069a  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c4  00000000  00000000  00003526  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000038ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__vector_1>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e9       	ldi	r30, 0x9E	; 158
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	c4 c0       	rjmp	.+392    	; 0x29a <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
int main(void)
{
	char input = 'B';
	char temp;
	initPorts();
	initInterrupt();
 114:	0e d0       	rcall	.+28     	; 0x132 <initPorts>
 116:	23 d0       	rcall	.+70     	; 0x15e <initInterrupt>
	InitUART(9600, 8, 'N');
 118:	2e e4       	ldi	r18, 0x4E	; 78
 11a:	48 e0       	ldi	r20, 0x08	; 8
 11c:	60 e8       	ldi	r22, 0x80	; 128
 11e:	75 e2       	ldi	r23, 0x25	; 37
 120:	80 e0       	ldi	r24, 0x00	; 0
	//sei () ; // Enable the Global Interrupt Enable flag so that interrupts can be processed
	
	while (1)
	{
		input = ReadChar();
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	3d d0       	rcall	.+122    	; 0x1a0 <InitUART>
		SendChar(input);
 126:	87 d0       	rcall	.+270    	; 0x236 <ReadChar>
 128:	c8 2f       	mov	r28, r24
		setLED(input);
 12a:	8d d0       	rcall	.+282    	; 0x246 <SendChar>
 12c:	8c 2f       	mov	r24, r28
 12e:	08 d0       	rcall	.+16     	; 0x140 <setLED>
 130:	fa cf       	rjmp	.-12     	; 0x126 <main+0x12>

00000132 <initPorts>:
			_delay_us(10);
			PORTC = 0b00000000; // Reset PORTC
			PORTB &= 0b0000100; // Reset PORTB
		}
	} while(condition == '1');
}
 132:	84 b1       	in	r24, 0x04	; 4
 134:	8f 60       	ori	r24, 0x0F	; 15
 136:	84 b9       	out	0x04, r24	; 4
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	81 b9       	out	0x01, r24	; 1
 13c:	87 b9       	out	0x07, r24	; 7
 13e:	08 95       	ret

00000140 <setLED>:
 140:	82 34       	cpi	r24, 0x42	; 66
 142:	39 f0       	breq	.+14     	; 0x152 <setLED+0x12>
 144:	86 34       	cpi	r24, 0x46	; 70
 146:	41 f0       	breq	.+16     	; 0x158 <setLED+0x18>
 148:	81 34       	cpi	r24, 0x41	; 65
 14a:	41 f4       	brne	.+16     	; 0x15c <setLED+0x1c>
 14c:	2a 98       	cbi	0x05, 2	; 5
 14e:	2b 98       	cbi	0x05, 3	; 5
 150:	08 95       	ret
 152:	2a 9a       	sbi	0x05, 2	; 5
 154:	2b 9a       	sbi	0x05, 3	; 5
 156:	08 95       	ret
 158:	2a 98       	cbi	0x05, 2	; 5
 15a:	2b 9a       	sbi	0x05, 3	; 5
 15c:	08 95       	ret

0000015e <initInterrupt>:
 15e:	50 98       	cbi	0x0a, 0	; 10
 160:	58 9a       	sbi	0x0b, 0	; 11
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
 168:	e8 9a       	sbi	0x1d, 0	; 29
 16a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 16e:	78 94       	sei
 170:	08 95       	ret

00000172 <__vector_1>:

ISR (INT0_vect)
{
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	8f 93       	push	r24
	if (condition == '1')
 17e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 182:	81 33       	cpi	r24, 0x31	; 49
 184:	21 f4       	brne	.+8      	; 0x18e <__vector_1+0x1c>
	{
		condition = '0';
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 18c:	03 c0       	rjmp	.+6      	; 0x194 <__vector_1+0x22>
	}
	else
	{
		condition = '1';
 18e:	81 e3       	ldi	r24, 0x31	; 49
 190:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	}
 194:	8f 91       	pop	r24
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <InitUART>:
  Returns value <> 0 (TRUE), if the UART HAS received a new character.
*************************************************************************/
unsigned char CharReady()
{
   return UCSR0A & (1<<7);
}
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	52 2f       	mov	r21, r18
 1a6:	8b 01       	movw	r16, r22
 1a8:	9c 01       	movw	r18, r24
 1aa:	0c 52       	subi	r16, 0x2C	; 44
 1ac:	11 40       	sbci	r17, 0x01	; 1
 1ae:	21 09       	sbc	r18, r1
 1b0:	31 09       	sbc	r19, r1
 1b2:	05 3d       	cpi	r16, 0xD5	; 213
 1b4:	10 4c       	sbci	r17, 0xC0	; 192
 1b6:	21 40       	sbci	r18, 0x01	; 1
 1b8:	31 05       	cpc	r19, r1
 1ba:	d0 f5       	brcc	.+116    	; 0x230 <InitUART+0x90>
 1bc:	45 50       	subi	r20, 0x05	; 5
 1be:	44 30       	cpi	r20, 0x04	; 4
 1c0:	b8 f5       	brcc	.+110    	; 0x230 <InitUART+0x90>
 1c2:	20 e2       	ldi	r18, 0x20	; 32
 1c4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 1c8:	28 e1       	ldi	r18, 0x18	; 24
 1ca:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 1ce:	44 0f       	add	r20, r20
 1d0:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 1d4:	55 34       	cpi	r21, 0x45	; 69
 1d6:	31 f4       	brne	.+12     	; 0x1e4 <InitUART+0x44>
 1d8:	e2 ec       	ldi	r30, 0xC2	; 194
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	20 81       	ld	r18, Z
 1de:	20 62       	ori	r18, 0x20	; 32
 1e0:	20 83       	st	Z, r18
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <InitUART+0x52>
 1e4:	5f 34       	cpi	r21, 0x4F	; 79
 1e6:	29 f4       	brne	.+10     	; 0x1f2 <InitUART+0x52>
 1e8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	20 81       	ld	r18, Z
 1ee:	20 63       	ori	r18, 0x30	; 48
 1f0:	20 83       	st	Z, r18
 1f2:	dc 01       	movw	r26, r24
 1f4:	cb 01       	movw	r24, r22
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	aa 1f       	adc	r26, r26
 1fc:	bb 1f       	adc	r27, r27
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	9c 01       	movw	r18, r24
 208:	ad 01       	movw	r20, r26
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	44 1f       	adc	r20, r20
 210:	55 1f       	adc	r21, r21
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	44 1f       	adc	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	74 e2       	ldi	r23, 0x24	; 36
 21e:	84 ef       	ldi	r24, 0xF4	; 244
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	19 d0       	rcall	.+50     	; 0x256 <__udivmodsi4>
 224:	21 50       	subi	r18, 0x01	; 1
 226:	31 09       	sbc	r19, r1
 228:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 22c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <ReadChar>:
Then this character is returned.
*************************************************************************/
char ReadChar()
{
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
 236:	e0 ec       	ldi	r30, 0xC0	; 192
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	88 23       	and	r24, r24
 23e:	ec f7       	brge	.-6      	; 0x23a <ReadChar+0x4>
  {}                        
  // Then return it
  return UDR0;
 240:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 244:	08 95       	ret

00000246 <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 246:	e0 ec       	ldi	r30, 0xC0	; 192
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	90 81       	ld	r25, Z
 24c:	95 ff       	sbrs	r25, 5
 24e:	fd cf       	rjmp	.-6      	; 0x24a <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 250:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 254:	08 95       	ret

00000256 <__udivmodsi4>:
 256:	a1 e2       	ldi	r26, 0x21	; 33
 258:	1a 2e       	mov	r1, r26
 25a:	aa 1b       	sub	r26, r26
 25c:	bb 1b       	sub	r27, r27
 25e:	fd 01       	movw	r30, r26
 260:	0d c0       	rjmp	.+26     	; 0x27c <__udivmodsi4_ep>

00000262 <__udivmodsi4_loop>:
 262:	aa 1f       	adc	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	ee 1f       	adc	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	a2 17       	cp	r26, r18
 26c:	b3 07       	cpc	r27, r19
 26e:	e4 07       	cpc	r30, r20
 270:	f5 07       	cpc	r31, r21
 272:	20 f0       	brcs	.+8      	; 0x27c <__udivmodsi4_ep>
 274:	a2 1b       	sub	r26, r18
 276:	b3 0b       	sbc	r27, r19
 278:	e4 0b       	sbc	r30, r20
 27a:	f5 0b       	sbc	r31, r21

0000027c <__udivmodsi4_ep>:
 27c:	66 1f       	adc	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	1a 94       	dec	r1
 286:	69 f7       	brne	.-38     	; 0x262 <__udivmodsi4_loop>
 288:	60 95       	com	r22
 28a:	70 95       	com	r23
 28c:	80 95       	com	r24
 28e:	90 95       	com	r25
 290:	9b 01       	movw	r18, r22
 292:	ac 01       	movw	r20, r24
 294:	bd 01       	movw	r22, r26
 296:	cf 01       	movw	r24, r30
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
