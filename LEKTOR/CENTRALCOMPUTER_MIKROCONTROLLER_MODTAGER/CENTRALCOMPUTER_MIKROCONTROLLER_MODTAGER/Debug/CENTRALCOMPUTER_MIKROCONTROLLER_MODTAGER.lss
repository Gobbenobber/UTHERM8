
CENTRALCOMPUTER_MIKROCONTROLLER_MODTAGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000007dc  00000870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800208  00800208  00000878  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001546  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff7  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b22  00000000  00000000  00002f45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d3  00000000  00000000  00003cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000787  00000000  00000000  000044c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	71 c2       	rjmp	.+1250   	; 0x4e8 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ed       	ldi	r30, 0xDC	; 220
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 31       	cpi	r26, 0x1E	; 30
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	5b c3       	rjmp	.+1718   	; 0x7d8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

int main(void)
{
	
	//Initiér UART og ZCDetector.
	InitUART(9600,8,'N');
 124:	2e e4       	ldi	r18, 0x4E	; 78
 126:	48 e0       	ldi	r20, 0x08	; 8
 128:	60 e8       	ldi	r22, 0x80	; 128
 12a:	75 e2       	ldi	r23, 0x25	; 37
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
	initZCDetector();
 130:	ac d0       	rcall	.+344    	; 0x28a <InitUART>
 132:	d3 d1       	rcall	.+934    	; 0x4da <initZCDetector>

	//PINA7 = INPUTS!
	DDRF &= ~(1 << 7);
 134:	87 98       	cbi	0x10, 7	; 16
	{	
		while (!(PINF & (1 << 7)))
		{}
		receivedData = receiveBurst();
		//SendInteger(strlen(receivedData));
		SendString(manchesterToString(receiveBurst()));
 136:	78 94       	sei
 138:	7f 9b       	sbis	0x0f, 7	; 15
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0x14>
 13c:	36 d1       	rcall	.+620    	; 0x3aa <receiveBurst>
 13e:	35 d1       	rcall	.+618    	; 0x3aa <receiveBurst>
 140:	02 d0       	rcall	.+4      	; 0x146 <manchesterToString>
	}
 142:	f6 d0       	rcall	.+492    	; 0x330 <SendString>
 144:	f9 cf       	rjmp	.-14     	; 0x138 <main+0x14>

00000146 <manchesterToString>:
	}
	return manchesterPtr;													// Returnér manchesterkoden
}

unsigned char* manchesterToString(unsigned char* toBeConverted)
{
 146:	6f 92       	push	r6
 148:	7f 92       	push	r7
 14a:	8f 92       	push	r8
 14c:	9f 92       	push	r9
 14e:	af 92       	push	r10
 150:	bf 92       	push	r11
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	0f 93       	push	r16
 15c:	1f 93       	push	r17
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
	if (toBeConverted == (unsigned char*)"") return 0;
 162:	22 e0       	ldi	r18, 0x02	; 2
 164:	86 30       	cpi	r24, 0x06	; 6
 166:	92 07       	cpc	r25, r18
 168:	09 f4       	brne	.+2      	; 0x16c <manchesterToString+0x26>
 16a:	69 c0       	rjmp	.+210    	; 0x23e <manchesterToString+0xf8>
	int len = ((int)(strlen((char*)toBeConverted)) / 2);
 16c:	fc 01       	movw	r30, r24
 16e:	01 90       	ld	r0, Z+
 170:	00 20       	and	r0, r0
 172:	e9 f7       	brne	.-6      	; 0x16e <manchesterToString+0x28>
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	e8 1b       	sub	r30, r24
 178:	f9 0b       	sbc	r31, r25
 17a:	ef 01       	movw	r28, r30
 17c:	0a f4       	brpl	.+2      	; 0x180 <manchesterToString+0x3a>
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	8c 01       	movw	r16, r24
 182:	d5 95       	asr	r29
 184:	c7 95       	ror	r28
	manchesterPtr = calloc((len+1), 1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	ce 01       	movw	r24, r28
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	e2 d1       	rcall	.+964    	; 0x554 <calloc>
 190:	6c 01       	movw	r12, r24
 192:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 196:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
	if (manchesterPtr == (unsigned char*)"")
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	86 30       	cpi	r24, 0x06	; 6
 19e:	96 07       	cpc	r25, r22
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <manchesterToString+0x5e>
 1a2:	50 c0       	rjmp	.+160    	; 0x244 <manchesterToString+0xfe>
	}
	int i = 0;
	int z = 7;
	int p = 7;

	for (int j = 0; j <= (len * 2); j++)
 1a4:	4e 01       	movw	r8, r28
 1a6:	88 0c       	add	r8, r8
 1a8:	99 1c       	adc	r9, r9
 1aa:	d6 fd       	sbrc	r29, 6
 1ac:	4e c0       	rjmp	.+156    	; 0x24a <manchesterToString+0x104>
 1ae:	61 2c       	mov	r6, r1
 1b0:	71 2c       	mov	r7, r1
 1b2:	27 e0       	ldi	r18, 0x07	; 7
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	47 e0       	ldi	r20, 0x07	; 7
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	a0 e0       	ldi	r26, 0x00	; 0
 1bc:	b0 e0       	ldi	r27, 0x00	; 0
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
			{
				manchesterPtr[i] |= (1 << z);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
	int z = 7;
	int p = 7;

	for (int j = 0; j <= (len * 2); j++)
	{
		unsigned char ch = toBeConverted[j];
 1c2:	f8 01       	movw	r30, r16
 1c4:	c1 91       	ld	r28, Z+
 1c6:	8f 01       	movw	r16, r30

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
		{
			if (ch == '\0')
 1c8:	c1 11       	cpse	r28, r1
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <manchesterToString+0x90>
			{
				manchesterPtr[i + 1] = '\0';
 1cc:	f6 01       	movw	r30, r12
 1ce:	ea 0f       	add	r30, r26
 1d0:	fb 1f       	adc	r31, r27
 1d2:	11 82       	std	Z+1, r1	; 0x01
				break;
 1d4:	2b c0       	rjmp	.+86     	; 0x22c <manchesterToString+0xe6>
	{
		unsigned char ch = toBeConverted[j];

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
		{
			if (ch == '\0')
 1d6:	64 e0       	ldi	r22, 0x04	; 4
 1d8:	70 e0       	ldi	r23, 0x00	; 0
			{
				z = 7;
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
 1da:	ec 2f       	mov	r30, r28
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
			if (ch == '\0')
			{
				manchesterPtr[i + 1] = '\0';
				break;
			}
			if (p < 0)
 1de:	33 23       	and	r19, r19
 1e0:	14 f4       	brge	.+4      	; 0x1e6 <manchesterToString+0xa0>
			{
				p = 7;
 1e2:	27 e0       	ldi	r18, 0x07	; 7
 1e4:	30 e0       	ldi	r19, 0x00	; 0
			}
			if (z < 0)
 1e6:	55 23       	and	r21, r21
 1e8:	94 f5       	brge	.+100    	; 0x24e <manchesterToString+0x108>
			{
				z = 7;
				i++;
 1ea:	11 96       	adiw	r26, 0x01	; 1
				manchesterPtr[i] = '\0';
 1ec:	a6 01       	movw	r20, r12
 1ee:	4a 0f       	add	r20, r26
 1f0:	5b 1f       	adc	r21, r27
 1f2:	ea 01       	movw	r28, r20
 1f4:	18 82       	st	Y, r1
			{
				p = 7;
			}
			if (z < 0)
			{
				z = 7;
 1f6:	47 e0       	ldi	r20, 0x07	; 7
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	29 c0       	rjmp	.+82     	; 0x24e <manchesterToString+0x108>
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
			{
				manchesterPtr[i] |= (1 << z);
 1fc:	76 01       	movw	r14, r12
 1fe:	ea 0e       	add	r14, r26
 200:	fb 1e       	adc	r15, r27
 202:	5c 01       	movw	r10, r24
 204:	04 2e       	mov	r0, r20
 206:	02 c0       	rjmp	.+4      	; 0x20c <manchesterToString+0xc6>
 208:	aa 0c       	add	r10, r10
 20a:	bb 1c       	adc	r11, r11
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <manchesterToString+0xc2>
 210:	e7 01       	movw	r28, r14
 212:	b8 80       	ld	r11, Y
 214:	ab 28       	or	r10, r11
 216:	a8 82       	st	Y, r10
				z--;
 218:	41 50       	subi	r20, 0x01	; 1
 21a:	51 09       	sbc	r21, r1
				p -= 2;
 21c:	22 50       	subi	r18, 0x02	; 2
 21e:	31 09       	sbc	r19, r1
 220:	20 c0       	rjmp	.+64     	; 0x262 <manchesterToString+0x11c>
			}
			else /*if (ch & (0 << z) && (ch | (1 << z - 1)))*/
			{
				manchesterPtr[i] &= (255 - (0 << z));
				z--;
 222:	41 50       	subi	r20, 0x01	; 1
 224:	51 09       	sbc	r21, r1
				p -= 2;
 226:	22 50       	subi	r18, 0x02	; 2
 228:	31 09       	sbc	r19, r1
 22a:	1b c0       	rjmp	.+54     	; 0x262 <manchesterToString+0x11c>
	}
	int i = 0;
	int z = 7;
	int p = 7;

	for (int j = 0; j <= (len * 2); j++)
 22c:	df ef       	ldi	r29, 0xFF	; 255
 22e:	6d 1a       	sub	r6, r29
 230:	7d 0a       	sbc	r7, r29
 232:	86 14       	cp	r8, r6
 234:	97 04       	cpc	r9, r7
 236:	2c f6       	brge	.-118    	; 0x1c2 <manchesterToString+0x7c>
				z--;
				p -= 2;
			}
		}
	}
	return manchesterPtr;
 238:	8c 2d       	mov	r24, r12
 23a:	9d 2d       	mov	r25, r13
 23c:	17 c0       	rjmp	.+46     	; 0x26c <manchesterToString+0x126>
	return manchesterPtr;													// Returnér manchesterkoden
}

unsigned char* manchesterToString(unsigned char* toBeConverted)
{
	if (toBeConverted == (unsigned char*)"") return 0;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	14 c0       	rjmp	.+40     	; 0x26c <manchesterToString+0x126>
	int len = ((int)(strlen((char*)toBeConverted)) / 2);
	manchesterPtr = calloc((len+1), 1);
	if (manchesterPtr == (unsigned char*)"")
	{
		return '\0';
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	11 c0       	rjmp	.+34     	; 0x26c <manchesterToString+0x126>
				z--;
				p -= 2;
			}
		}
	}
	return manchesterPtr;
 24a:	9d 2d       	mov	r25, r13
 24c:	0f c0       	rjmp	.+30     	; 0x26c <manchesterToString+0x126>
			{
				z = 7;
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
 24e:	7f 01       	movw	r14, r30
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <manchesterToString+0x112>
 254:	f5 94       	asr	r15
 256:	e7 94       	ror	r14
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <manchesterToString+0x10e>
 25c:	e0 fe       	sbrs	r14, 0
 25e:	e1 cf       	rjmp	.-62     	; 0x222 <manchesterToString+0xdc>
 260:	cd cf       	rjmp	.-102    	; 0x1fc <manchesterToString+0xb6>
 262:	61 50       	subi	r22, 0x01	; 1
 264:	71 09       	sbc	r23, r1

	for (int j = 0; j <= (len * 2); j++)
	{
		unsigned char ch = toBeConverted[j];

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
 266:	09 f0       	breq	.+2      	; 0x26a <manchesterToString+0x124>
 268:	ba cf       	rjmp	.-140    	; 0x1de <manchesterToString+0x98>
 26a:	e0 cf       	rjmp	.-64     	; 0x22c <manchesterToString+0xe6>
				p -= 2;
			}
		}
	}
	return manchesterPtr;
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	cf 90       	pop	r12
 27c:	bf 90       	pop	r11
 27e:	af 90       	pop	r10
 280:	9f 90       	pop	r9
 282:	8f 90       	pop	r8
 284:	7f 90       	pop	r7
 286:	6f 90       	pop	r6
 288:	08 95       	ret

0000028a <InitUART>:
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR0;
}
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	52 2f       	mov	r21, r18
 290:	8b 01       	movw	r16, r22
 292:	9c 01       	movw	r18, r24
 294:	0c 52       	subi	r16, 0x2C	; 44
 296:	11 40       	sbci	r17, 0x01	; 1
 298:	21 09       	sbc	r18, r1
 29a:	31 09       	sbc	r19, r1
 29c:	05 3d       	cpi	r16, 0xD5	; 213
 29e:	10 4c       	sbci	r17, 0xC0	; 192
 2a0:	21 40       	sbci	r18, 0x01	; 1
 2a2:	31 05       	cpc	r19, r1
 2a4:	d0 f5       	brcc	.+116    	; 0x31a <InitUART+0x90>
 2a6:	45 50       	subi	r20, 0x05	; 5
 2a8:	44 30       	cpi	r20, 0x04	; 4
 2aa:	b8 f5       	brcc	.+110    	; 0x31a <InitUART+0x90>
 2ac:	20 e2       	ldi	r18, 0x20	; 32
 2ae:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 2b2:	28 e1       	ldi	r18, 0x18	; 24
 2b4:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 2b8:	44 0f       	add	r20, r20
 2ba:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 2be:	55 34       	cpi	r21, 0x45	; 69
 2c0:	31 f4       	brne	.+12     	; 0x2ce <InitUART+0x44>
 2c2:	e2 ec       	ldi	r30, 0xC2	; 194
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	20 81       	ld	r18, Z
 2c8:	20 62       	ori	r18, 0x20	; 32
 2ca:	20 83       	st	Z, r18
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <InitUART+0x52>
 2ce:	5f 34       	cpi	r21, 0x4F	; 79
 2d0:	29 f4       	brne	.+10     	; 0x2dc <InitUART+0x52>
 2d2:	e2 ec       	ldi	r30, 0xC2	; 194
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	20 81       	ld	r18, Z
 2d8:	20 63       	ori	r18, 0x30	; 48
 2da:	20 83       	st	Z, r18
 2dc:	dc 01       	movw	r26, r24
 2de:	cb 01       	movw	r24, r22
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	aa 1f       	adc	r26, r26
 2e6:	bb 1f       	adc	r27, r27
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	aa 1f       	adc	r26, r26
 2ee:	bb 1f       	adc	r27, r27
 2f0:	9c 01       	movw	r18, r24
 2f2:	ad 01       	movw	r20, r26
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	44 1f       	adc	r20, r20
 2fa:	55 1f       	adc	r21, r21
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	44 1f       	adc	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	74 e2       	ldi	r23, 0x24	; 36
 308:	84 ef       	ldi	r24, 0xF4	; 244
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	01 d1       	rcall	.+514    	; 0x510 <__udivmodsi4>
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	31 09       	sbc	r19, r1
 312:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 316:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 320:	e0 ec       	ldi	r30, 0xC0	; 192
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	90 81       	ld	r25, Z
 326:	95 ff       	sbrs	r25, 5
 328:	fd cf       	rjmp	.-6      	; 0x324 <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 32a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 32e:	08 95       	ret

00000330 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 336:	88 81       	ld	r24, Y
 338:	88 23       	and	r24, r24
 33a:	29 f0       	breq	.+10     	; 0x346 <SendString+0x16>
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 33c:	21 96       	adiw	r28, 0x01	; 1
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 33e:	f0 df       	rcall	.-32     	; 0x320 <SendChar>
 340:	89 91       	ld	r24, Y+
 342:	81 11       	cpse	r24, r1
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 344:	fc cf       	rjmp	.-8      	; 0x33e <SendString+0xe>
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <start1msDelay>:
}

void start1msDelay()
{
	// Timer3: Normal mode, PS = 0
	TCCR3A = 0b00000000;
 34c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00000001;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	// Overflow hvert MS.
	//Sæt timerStatus til '1' (=going)
	//timerStatus_3 = '1';
	TCNT3 = (0xFFFF-16000);
 356:	8f e7       	ldi	r24, 0x7F	; 127
 358:	91 ec       	ldi	r25, 0xC1	; 193
 35a:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 35e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	while ((TIFR3 & (1<<0)) == 0)
 362:	c0 9b       	sbis	0x18, 0	; 24
 364:	fe cf       	rjmp	.-4      	; 0x362 <start1msDelay+0x16>
	{}
	TCCR3B = 0;
 366:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIFR3 = 1<<0;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	88 bb       	out	0x18, r24	; 24
 36e:	08 95       	ret

00000370 <start400usDelay>:
}

void start400usDelay()
{
	// Timer4: Normal mode, PS = 0
	TCCR4A = 0b00000000;
 370:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = 0b00000001;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	// Overflow hvert MS.
	//Sæt timerStatus til '1' (=going)
	//timerStatus_3 = '1';
	TCNT4 = 63936;
 37a:	80 ec       	ldi	r24, 0xC0	; 192
 37c:	99 ef       	ldi	r25, 0xF9	; 249
 37e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 382:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
	while ((TIFR4 & (1<<0)) == 0)
 386:	c8 9b       	sbis	0x19, 0	; 25
 388:	fe cf       	rjmp	.-4      	; 0x386 <start400usDelay+0x16>
	{}
	TCCR4B = 0;
 38a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TIFR4 = 1<<0;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	89 bb       	out	0x19, r24	; 25
 392:	08 95       	ret

00000394 <ventPaaZC>:
return receive;
}

void ventPaaZC()
{
	ZCDetected_ = 0;
 394:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <ZCDetected_+0x1>
 398:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <ZCDetected_>
	while(ZCDetected_ == 0)	{}
 39c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <ZCDetected_>
 3a0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <ZCDetected_+0x1>
 3a4:	89 2b       	or	r24, r25
 3a6:	d1 f3       	breq	.-12     	; 0x39c <ventPaaZC+0x8>
}
 3a8:	08 95       	ret

000003aa <receiveBurst>:
	TIFR4 = 1<<0;
	//timerStatus_3 = '0';
}

unsigned char* receiveBurst()
{
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
	for (j = 7; j >= 0; j--)
 3b2:	87 e0       	ldi	r24, 0x07	; 7
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <j+0x1>
 3ba:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <j>
		{
			firstByteReceived |= 1 << j;
		}
		else
		{
			firstByteReceived &= ~(1 << j);
 3be:	c1 e0       	ldi	r28, 0x01	; 1
 3c0:	d0 e0       	ldi	r29, 0x00	; 0

unsigned char* receiveBurst()
{
	for (j = 7; j >= 0; j--)
	{
		if (PINF & (1 << 7))
 3c2:	7f 9b       	sbis	0x0f, 7	; 15
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <receiveBurst+0x36>
		{
			firstByteReceived |= 1 << j;
 3c6:	9e 01       	movw	r18, r28
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <receiveBurst+0x24>
 3ca:	22 0f       	add	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <receiveBurst+0x20>
 3d2:	c9 01       	movw	r24, r18
 3d4:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <firstByteReceived>
 3d8:	89 2b       	or	r24, r25
 3da:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <firstByteReceived>
 3de:	0d c0       	rjmp	.+26     	; 0x3fa <receiveBurst+0x50>
		}
		else
		{
			firstByteReceived &= ~(1 << j);
 3e0:	9e 01       	movw	r18, r28
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <receiveBurst+0x3e>
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	8a 95       	dec	r24
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <receiveBurst+0x3a>
 3ec:	c9 01       	movw	r24, r18
 3ee:	80 95       	com	r24
 3f0:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <firstByteReceived>
 3f4:	89 23       	and	r24, r25
 3f6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <firstByteReceived>
		}
		ventPaaZC();
		start1msDelay();
 3fa:	cc df       	rcall	.-104    	; 0x394 <ventPaaZC>
 3fc:	a7 df       	rcall	.-178    	; 0x34c <start1msDelay>
 3fe:	a6 df       	rcall	.-180    	; 0x34c <start1msDelay>
 400:	b7 df       	rcall	.-146    	; 0x370 <start400usDelay>
 402:	b6 df       	rcall	.-148    	; 0x370 <start400usDelay>
 404:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <j>
 408:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <j+0x1>
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <j+0x1>
 412:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <j>
 416:	99 23       	and	r25, r25
 418:	a4 f6       	brge	.-88     	; 0x3c2 <receiveBurst+0x18>
 41a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <firstByteReceived>
 41e:	8e 3e       	cpi	r24, 0xEE	; 238
 420:	09 f0       	breq	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	54 c0       	rjmp	.+168    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 424:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <i+0x1>
 428:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <i>
 42c:	07 e0       	ldi	r16, 0x07	; 7
 42e:	10 e0       	ldi	r17, 0x00	; 0
 430:	c1 e0       	ldi	r28, 0x01	; 1
 432:	d0 e0       	ldi	r29, 0x00	; 0
 434:	05 c0       	rjmp	.+10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 436:	04 97       	sbiw	r24, 0x04	; 4
 438:	19 f4       	brne	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <receive+0x4>
 43e:	46 c0       	rjmp	.+140    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 440:	00 93 14 02 	sts	0x0214, r16	; 0x800214 <j>
 444:	10 93 15 02 	sts	0x0215, r17	; 0x800215 <j+0x1>
 448:	80 2f       	mov	r24, r16
 44a:	7f 9b       	sbis	0x0f, 7	; 15
 44c:	11 c0       	rjmp	.+34     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 44e:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <i>
 452:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <i+0x1>
 456:	e5 5f       	subi	r30, 0xF5	; 245
 458:	fd 4f       	sbci	r31, 0xFD	; 253
 45a:	9e 01       	movw	r18, r28
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	22 0f       	add	r18, r18
 460:	33 1f       	adc	r19, r19
 462:	8a 95       	dec	r24
 464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	c9 01       	movw	r24, r18
 468:	90 81       	ld	r25, Z
 46a:	89 2b       	or	r24, r25
 46c:	80 83       	st	Z, r24
 46e:	11 c0       	rjmp	.+34     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 470:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <i>
 474:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <i+0x1>
 478:	e5 5f       	subi	r30, 0xF5	; 245
 47a:	fd 4f       	sbci	r31, 0xFD	; 253
 47c:	9e 01       	movw	r18, r28
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	8a 95       	dec	r24
 486:	e2 f7       	brpl	.-8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 488:	c9 01       	movw	r24, r18
 48a:	80 95       	com	r24
 48c:	90 81       	ld	r25, Z
 48e:	89 23       	and	r24, r25
 490:	80 83       	st	Z, r24
 492:	80 df       	rcall	.-256    	; 0x394 <ventPaaZC>
 494:	5b df       	rcall	.-330    	; 0x34c <start1msDelay>
 496:	5a df       	rcall	.-332    	; 0x34c <start1msDelay>
 498:	6b df       	rcall	.-298    	; 0x370 <start400usDelay>
 49a:	6a df       	rcall	.-300    	; 0x370 <start400usDelay>
 49c:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <j>
 4a0:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <j+0x1>
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <j+0x1>
 4aa:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <j>
 4ae:	99 23       	and	r25, r25
 4b0:	64 f6       	brge	.-104    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 4b2:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <i>
 4b6:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <i+0x1>
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <i+0x1>
 4c0:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <i>
 4c4:	85 30       	cpi	r24, 0x05	; 5
 4c6:	91 05       	cpc	r25, r1
 4c8:	0c f4       	brge	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ca:	b5 cf       	rjmp	.-150    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 4cc:	8b e0       	ldi	r24, 0x0B	; 11
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	08 95       	ret

000004da <initZCDetector>:
 void initZCDetector()
 {
	 //------------------------------------//
	 //			 interrupt test			  //
	 //------------------------------------//
	 DDRD &= ~(1 << 0);
 4da:	50 98       	cbi	0x0a, 0	; 10
	 // PD2 (PCINT0 pin) is now an input
	 PORTD |= (1 << 0);
 4dc:	58 9a       	sbi	0x0b, 0	; 11
	 // PD2 is now an input with pull-up enabled
	 //EICRA |= (1 << ISC11) | (1 << ISC10);   // set INT0 to trigger on ANY logic change
	 EICRA = 0b00000011;
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	 EIMSK |= (1 << 0);
 4e4:	e8 9a       	sbi	0x1d, 0	; 29
 4e6:	08 95       	ret

000004e8 <__vector_1>:

 }

 // Interrupt service routine for INT0 (Er INT3 for Atmega 2560)
 ISR(INT0_vect)
 {
 4e8:	1f 92       	push	r1
 4ea:	0f 92       	push	r0
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	0f 92       	push	r0
 4f0:	11 24       	eor	r1, r1
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
	 ZCDetected_ = 1;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <ZCDetected_+0x1>
 4fe:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <ZCDetected_>
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__udivmodsi4>:
 510:	a1 e2       	ldi	r26, 0x21	; 33
 512:	1a 2e       	mov	r1, r26
 514:	aa 1b       	sub	r26, r26
 516:	bb 1b       	sub	r27, r27
 518:	fd 01       	movw	r30, r26
 51a:	0d c0       	rjmp	.+26     	; 0x536 <__udivmodsi4_ep>

0000051c <__udivmodsi4_loop>:
 51c:	aa 1f       	adc	r26, r26
 51e:	bb 1f       	adc	r27, r27
 520:	ee 1f       	adc	r30, r30
 522:	ff 1f       	adc	r31, r31
 524:	a2 17       	cp	r26, r18
 526:	b3 07       	cpc	r27, r19
 528:	e4 07       	cpc	r30, r20
 52a:	f5 07       	cpc	r31, r21
 52c:	20 f0       	brcs	.+8      	; 0x536 <__udivmodsi4_ep>
 52e:	a2 1b       	sub	r26, r18
 530:	b3 0b       	sbc	r27, r19
 532:	e4 0b       	sbc	r30, r20
 534:	f5 0b       	sbc	r31, r21

00000536 <__udivmodsi4_ep>:
 536:	66 1f       	adc	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	1a 94       	dec	r1
 540:	69 f7       	brne	.-38     	; 0x51c <__udivmodsi4_loop>
 542:	60 95       	com	r22
 544:	70 95       	com	r23
 546:	80 95       	com	r24
 548:	90 95       	com	r25
 54a:	9b 01       	movw	r18, r22
 54c:	ac 01       	movw	r20, r24
 54e:	bd 01       	movw	r22, r26
 550:	cf 01       	movw	r24, r30
 552:	08 95       	ret

00000554 <calloc>:
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	86 9f       	mul	r24, r22
 55e:	80 01       	movw	r16, r0
 560:	87 9f       	mul	r24, r23
 562:	10 0d       	add	r17, r0
 564:	96 9f       	mul	r25, r22
 566:	10 0d       	add	r17, r0
 568:	11 24       	eor	r1, r1
 56a:	c8 01       	movw	r24, r16
 56c:	0d d0       	rcall	.+26     	; 0x588 <malloc>
 56e:	ec 01       	movw	r28, r24
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	21 f0       	breq	.+8      	; 0x57c <calloc+0x28>
 574:	a8 01       	movw	r20, r16
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	27 d1       	rcall	.+590    	; 0x7ca <memset>
 57c:	ce 01       	movw	r24, r28
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	08 95       	ret

00000588 <malloc>:
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	cf 93       	push	r28
 58e:	df 93       	push	r29
 590:	82 30       	cpi	r24, 0x02	; 2
 592:	91 05       	cpc	r25, r1
 594:	10 f4       	brcc	.+4      	; 0x59a <malloc+0x12>
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__flp>
 59e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <__flp+0x1>
 5a2:	20 e0       	ldi	r18, 0x00	; 0
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	a0 e0       	ldi	r26, 0x00	; 0
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	30 97       	sbiw	r30, 0x00	; 0
 5ac:	19 f1       	breq	.+70     	; 0x5f4 <malloc+0x6c>
 5ae:	40 81       	ld	r20, Z
 5b0:	51 81       	ldd	r21, Z+1	; 0x01
 5b2:	02 81       	ldd	r16, Z+2	; 0x02
 5b4:	13 81       	ldd	r17, Z+3	; 0x03
 5b6:	48 17       	cp	r20, r24
 5b8:	59 07       	cpc	r21, r25
 5ba:	c8 f0       	brcs	.+50     	; 0x5ee <malloc+0x66>
 5bc:	84 17       	cp	r24, r20
 5be:	95 07       	cpc	r25, r21
 5c0:	69 f4       	brne	.+26     	; 0x5dc <malloc+0x54>
 5c2:	10 97       	sbiw	r26, 0x00	; 0
 5c4:	31 f0       	breq	.+12     	; 0x5d2 <malloc+0x4a>
 5c6:	12 96       	adiw	r26, 0x02	; 2
 5c8:	0c 93       	st	X, r16
 5ca:	12 97       	sbiw	r26, 0x02	; 2
 5cc:	13 96       	adiw	r26, 0x03	; 3
 5ce:	1c 93       	st	X, r17
 5d0:	27 c0       	rjmp	.+78     	; 0x620 <malloc+0x98>
 5d2:	00 93 1c 02 	sts	0x021C, r16	; 0x80021c <__flp>
 5d6:	10 93 1d 02 	sts	0x021D, r17	; 0x80021d <__flp+0x1>
 5da:	22 c0       	rjmp	.+68     	; 0x620 <malloc+0x98>
 5dc:	21 15       	cp	r18, r1
 5de:	31 05       	cpc	r19, r1
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <malloc+0x60>
 5e2:	42 17       	cp	r20, r18
 5e4:	53 07       	cpc	r21, r19
 5e6:	18 f4       	brcc	.+6      	; 0x5ee <malloc+0x66>
 5e8:	9a 01       	movw	r18, r20
 5ea:	bd 01       	movw	r22, r26
 5ec:	ef 01       	movw	r28, r30
 5ee:	df 01       	movw	r26, r30
 5f0:	f8 01       	movw	r30, r16
 5f2:	db cf       	rjmp	.-74     	; 0x5aa <malloc+0x22>
 5f4:	21 15       	cp	r18, r1
 5f6:	31 05       	cpc	r19, r1
 5f8:	f9 f0       	breq	.+62     	; 0x638 <malloc+0xb0>
 5fa:	28 1b       	sub	r18, r24
 5fc:	39 0b       	sbc	r19, r25
 5fe:	24 30       	cpi	r18, 0x04	; 4
 600:	31 05       	cpc	r19, r1
 602:	80 f4       	brcc	.+32     	; 0x624 <malloc+0x9c>
 604:	8a 81       	ldd	r24, Y+2	; 0x02
 606:	9b 81       	ldd	r25, Y+3	; 0x03
 608:	61 15       	cp	r22, r1
 60a:	71 05       	cpc	r23, r1
 60c:	21 f0       	breq	.+8      	; 0x616 <malloc+0x8e>
 60e:	fb 01       	movw	r30, r22
 610:	93 83       	std	Z+3, r25	; 0x03
 612:	82 83       	std	Z+2, r24	; 0x02
 614:	04 c0       	rjmp	.+8      	; 0x61e <malloc+0x96>
 616:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <__flp+0x1>
 61a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__flp>
 61e:	fe 01       	movw	r30, r28
 620:	32 96       	adiw	r30, 0x02	; 2
 622:	44 c0       	rjmp	.+136    	; 0x6ac <malloc+0x124>
 624:	fe 01       	movw	r30, r28
 626:	e2 0f       	add	r30, r18
 628:	f3 1f       	adc	r31, r19
 62a:	81 93       	st	Z+, r24
 62c:	91 93       	st	Z+, r25
 62e:	22 50       	subi	r18, 0x02	; 2
 630:	31 09       	sbc	r19, r1
 632:	39 83       	std	Y+1, r19	; 0x01
 634:	28 83       	st	Y, r18
 636:	3a c0       	rjmp	.+116    	; 0x6ac <malloc+0x124>
 638:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 63c:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 640:	23 2b       	or	r18, r19
 642:	41 f4       	brne	.+16     	; 0x654 <malloc+0xcc>
 644:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 648:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 64c:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <__brkval+0x1>
 650:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <__brkval>
 654:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 658:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 65c:	21 15       	cp	r18, r1
 65e:	31 05       	cpc	r19, r1
 660:	41 f4       	brne	.+16     	; 0x672 <malloc+0xea>
 662:	2d b7       	in	r18, 0x3d	; 61
 664:	3e b7       	in	r19, 0x3e	; 62
 666:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 66a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 66e:	24 1b       	sub	r18, r20
 670:	35 0b       	sbc	r19, r21
 672:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__brkval>
 676:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__brkval+0x1>
 67a:	e2 17       	cp	r30, r18
 67c:	f3 07       	cpc	r31, r19
 67e:	a0 f4       	brcc	.+40     	; 0x6a8 <malloc+0x120>
 680:	2e 1b       	sub	r18, r30
 682:	3f 0b       	sbc	r19, r31
 684:	28 17       	cp	r18, r24
 686:	39 07       	cpc	r19, r25
 688:	78 f0       	brcs	.+30     	; 0x6a8 <malloc+0x120>
 68a:	ac 01       	movw	r20, r24
 68c:	4e 5f       	subi	r20, 0xFE	; 254
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	24 17       	cp	r18, r20
 692:	35 07       	cpc	r19, r21
 694:	48 f0       	brcs	.+18     	; 0x6a8 <malloc+0x120>
 696:	4e 0f       	add	r20, r30
 698:	5f 1f       	adc	r21, r31
 69a:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <__brkval+0x1>
 69e:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <__brkval>
 6a2:	81 93       	st	Z+, r24
 6a4:	91 93       	st	Z+, r25
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <malloc+0x124>
 6a8:	e0 e0       	ldi	r30, 0x00	; 0
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	cf 01       	movw	r24, r30
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <free>:
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	09 f4       	brne	.+2      	; 0x6c2 <free+0xa>
 6c0:	81 c0       	rjmp	.+258    	; 0x7c4 <free+0x10c>
 6c2:	fc 01       	movw	r30, r24
 6c4:	32 97       	sbiw	r30, 0x02	; 2
 6c6:	13 82       	std	Z+3, r1	; 0x03
 6c8:	12 82       	std	Z+2, r1	; 0x02
 6ca:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <__flp>
 6ce:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <__flp+0x1>
 6d2:	10 97       	sbiw	r26, 0x00	; 0
 6d4:	81 f4       	brne	.+32     	; 0x6f6 <free+0x3e>
 6d6:	20 81       	ld	r18, Z
 6d8:	31 81       	ldd	r19, Z+1	; 0x01
 6da:	82 0f       	add	r24, r18
 6dc:	93 1f       	adc	r25, r19
 6de:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 6e2:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 6e6:	28 17       	cp	r18, r24
 6e8:	39 07       	cpc	r19, r25
 6ea:	51 f5       	brne	.+84     	; 0x740 <free+0x88>
 6ec:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__brkval+0x1>
 6f0:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__brkval>
 6f4:	67 c0       	rjmp	.+206    	; 0x7c4 <free+0x10c>
 6f6:	ed 01       	movw	r28, r26
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	ce 17       	cp	r28, r30
 6fe:	df 07       	cpc	r29, r31
 700:	40 f4       	brcc	.+16     	; 0x712 <free+0x5a>
 702:	4a 81       	ldd	r20, Y+2	; 0x02
 704:	5b 81       	ldd	r21, Y+3	; 0x03
 706:	9e 01       	movw	r18, r28
 708:	41 15       	cp	r20, r1
 70a:	51 05       	cpc	r21, r1
 70c:	f1 f0       	breq	.+60     	; 0x74a <free+0x92>
 70e:	ea 01       	movw	r28, r20
 710:	f5 cf       	rjmp	.-22     	; 0x6fc <free+0x44>
 712:	d3 83       	std	Z+3, r29	; 0x03
 714:	c2 83       	std	Z+2, r28	; 0x02
 716:	40 81       	ld	r20, Z
 718:	51 81       	ldd	r21, Z+1	; 0x01
 71a:	84 0f       	add	r24, r20
 71c:	95 1f       	adc	r25, r21
 71e:	c8 17       	cp	r28, r24
 720:	d9 07       	cpc	r29, r25
 722:	59 f4       	brne	.+22     	; 0x73a <free+0x82>
 724:	88 81       	ld	r24, Y
 726:	99 81       	ldd	r25, Y+1	; 0x01
 728:	84 0f       	add	r24, r20
 72a:	95 1f       	adc	r25, r21
 72c:	02 96       	adiw	r24, 0x02	; 2
 72e:	91 83       	std	Z+1, r25	; 0x01
 730:	80 83       	st	Z, r24
 732:	8a 81       	ldd	r24, Y+2	; 0x02
 734:	9b 81       	ldd	r25, Y+3	; 0x03
 736:	93 83       	std	Z+3, r25	; 0x03
 738:	82 83       	std	Z+2, r24	; 0x02
 73a:	21 15       	cp	r18, r1
 73c:	31 05       	cpc	r19, r1
 73e:	29 f4       	brne	.+10     	; 0x74a <free+0x92>
 740:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <__flp+0x1>
 744:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <__flp>
 748:	3d c0       	rjmp	.+122    	; 0x7c4 <free+0x10c>
 74a:	e9 01       	movw	r28, r18
 74c:	fb 83       	std	Y+3, r31	; 0x03
 74e:	ea 83       	std	Y+2, r30	; 0x02
 750:	49 91       	ld	r20, Y+
 752:	59 91       	ld	r21, Y+
 754:	c4 0f       	add	r28, r20
 756:	d5 1f       	adc	r29, r21
 758:	ec 17       	cp	r30, r28
 75a:	fd 07       	cpc	r31, r29
 75c:	61 f4       	brne	.+24     	; 0x776 <free+0xbe>
 75e:	80 81       	ld	r24, Z
 760:	91 81       	ldd	r25, Z+1	; 0x01
 762:	84 0f       	add	r24, r20
 764:	95 1f       	adc	r25, r21
 766:	02 96       	adiw	r24, 0x02	; 2
 768:	e9 01       	movw	r28, r18
 76a:	99 83       	std	Y+1, r25	; 0x01
 76c:	88 83       	st	Y, r24
 76e:	82 81       	ldd	r24, Z+2	; 0x02
 770:	93 81       	ldd	r25, Z+3	; 0x03
 772:	9b 83       	std	Y+3, r25	; 0x03
 774:	8a 83       	std	Y+2, r24	; 0x02
 776:	e0 e0       	ldi	r30, 0x00	; 0
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	12 96       	adiw	r26, 0x02	; 2
 77c:	8d 91       	ld	r24, X+
 77e:	9c 91       	ld	r25, X
 780:	13 97       	sbiw	r26, 0x03	; 3
 782:	00 97       	sbiw	r24, 0x00	; 0
 784:	19 f0       	breq	.+6      	; 0x78c <free+0xd4>
 786:	fd 01       	movw	r30, r26
 788:	dc 01       	movw	r26, r24
 78a:	f7 cf       	rjmp	.-18     	; 0x77a <free+0xc2>
 78c:	8d 91       	ld	r24, X+
 78e:	9c 91       	ld	r25, X
 790:	11 97       	sbiw	r26, 0x01	; 1
 792:	9d 01       	movw	r18, r26
 794:	2e 5f       	subi	r18, 0xFE	; 254
 796:	3f 4f       	sbci	r19, 0xFF	; 255
 798:	82 0f       	add	r24, r18
 79a:	93 1f       	adc	r25, r19
 79c:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 7a0:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 7a4:	28 17       	cp	r18, r24
 7a6:	39 07       	cpc	r19, r25
 7a8:	69 f4       	brne	.+26     	; 0x7c4 <free+0x10c>
 7aa:	30 97       	sbiw	r30, 0x00	; 0
 7ac:	29 f4       	brne	.+10     	; 0x7b8 <free+0x100>
 7ae:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp+0x1>
 7b2:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__flp>
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <free+0x104>
 7b8:	13 82       	std	Z+3, r1	; 0x03
 7ba:	12 82       	std	Z+2, r1	; 0x02
 7bc:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <__brkval+0x1>
 7c0:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <__brkval>
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	08 95       	ret

000007ca <memset>:
 7ca:	dc 01       	movw	r26, r24
 7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <memset+0x6>
 7ce:	6d 93       	st	X+, r22
 7d0:	41 50       	subi	r20, 0x01	; 1
 7d2:	50 40       	sbci	r21, 0x00	; 0
 7d4:	e0 f7       	brcc	.-8      	; 0x7ce <memset+0x4>
 7d6:	08 95       	ret

000007d8 <_exit>:
 7d8:	f8 94       	cli

000007da <__stop_program>:
 7da:	ff cf       	rjmp	.-2      	; 0x7da <__stop_program>
