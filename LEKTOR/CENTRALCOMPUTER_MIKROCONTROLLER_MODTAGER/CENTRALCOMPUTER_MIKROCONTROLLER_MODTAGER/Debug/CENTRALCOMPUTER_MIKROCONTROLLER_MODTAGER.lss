
CENTRALCOMPUTER_MIKROCONTROLLER_MODTAGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000802  00000896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000802  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080020c  0080020c  000008a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001545  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001024  00000000  00000000  00001f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae8  00000000  00000000  00002f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00003a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c5  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000605  00000000  00000000  000044a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00004aa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	84 c2       	rjmp	.+1288   	; 0x50e <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e0       	ldi	r30, 0x02	; 2
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 32       	cpi	r26, 0x23	; 35
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	6e c3       	rjmp	.+1756   	; 0x7fe <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

int main(void)
{	

	//Initiér UART og ZCDetector.
	InitUART(9600,8,'N');
 124:	2e e4       	ldi	r18, 0x4E	; 78
 126:	48 e0       	ldi	r20, 0x08	; 8
 128:	60 e8       	ldi	r22, 0x80	; 128
 12a:	75 e2       	ldi	r23, 0x25	; 37
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
	initZCDetector();
 130:	bd d0       	rcall	.+378    	; 0x2ac <InitUART>
	//PINA7 = INPUTS!
	DDRF &= ~(1 << 7);
	// ^ Hvis det ikke virker, prøv evt: DDRA = 0; 

	//// Global interrupt enable
	sei();
 132:	e6 d1       	rcall	.+972    	; 0x500 <initZCDetector>
	//int h;
	//int w = 1;
	while(1)
	{

		char* receivedData = receiveBurst();
 134:	87 98       	cbi	0x10, 7	; 16
 136:	78 94       	sei
		
		if (receivedData[5] == '\0')
 138:	49 d1       	rcall	.+658    	; 0x3cc <receiveBurst>
 13a:	fc 01       	movw	r30, r24
		{
		SendString(manchesterToString(receivedData));
 13c:	25 81       	ldd	r18, Z+5	; 0x05
 13e:	21 11       	cpse	r18, r1
 140:	fb cf       	rjmp	.-10     	; 0x138 <main+0x14>
 142:	02 d0       	rcall	.+4      	; 0x148 <manchesterToString>
 144:	06 d1       	rcall	.+524    	; 0x352 <SendString>
 146:	f8 cf       	rjmp	.-16     	; 0x138 <main+0x14>

00000148 <manchesterToString>:
	}
	return manchesterPtr;													// Returnér manchesterkoden
}

unsigned char* manchesterToString(unsigned char* toBeConverted)
{
 148:	af 92       	push	r10
 14a:	bf 92       	push	r11
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
	if (toBeConverted == (unsigned char*)"") return 0;
 15c:	22 e0       	ldi	r18, 0x02	; 2
 15e:	8a 30       	cpi	r24, 0x0A	; 10
 160:	92 07       	cpc	r25, r18
 162:	09 f4       	brne	.+2      	; 0x166 <manchesterToString+0x1e>
 164:	83 c0       	rjmp	.+262    	; 0x26c <manchesterToString+0x124>
	int len = ((int)(strlen((char*)toBeConverted)) / 2);
 166:	fc 01       	movw	r30, r24
 168:	01 90       	ld	r0, Z+
 16a:	00 20       	and	r0, r0
 16c:	e9 f7       	brne	.-6      	; 0x168 <manchesterToString+0x20>
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	e8 1b       	sub	r30, r24
 172:	f9 0b       	sbc	r31, r25
 174:	ef 01       	movw	r28, r30
 176:	0a f4       	brpl	.+2      	; 0x17a <manchesterToString+0x32>
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	7c 01       	movw	r14, r24
 17c:	d5 95       	asr	r29
 17e:	c7 95       	ror	r28
	manchesterPtr = calloc((len+1), 1);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	f8 d1       	rcall	.+1008   	; 0x57a <calloc>
 18a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <manchesterPtr+0x1>
 18e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <manchesterPtr>
	if (manchesterPtr == (unsigned char*)"")
 192:	8a 50       	subi	r24, 0x0A	; 10
 194:	92 40       	sbci	r25, 0x02	; 2
 196:	09 f4       	brne	.+2      	; 0x19a <manchesterToString+0x52>
 198:	6c c0       	rjmp	.+216    	; 0x272 <manchesterToString+0x12a>
	}
	static int i = 0;
	static int z = 7;
	static int p = 7;

	for (int j = 0; j <= (len * 2); j++)
 19a:	5e 01       	movw	r10, r28
 19c:	aa 0c       	add	r10, r10
 19e:	bb 1c       	adc	r11, r11
 1a0:	d6 fd       	sbrc	r29, 6
 1a2:	5f c0       	rjmp	.+190    	; 0x262 <manchesterToString+0x11a>
 1a4:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <p.1886>
 1a8:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <p.1886+0x1>
 1ac:	40 91 06 02 	lds	r20, 0x0206	; 0x800206 <z.1885>
 1b0:	50 91 07 02 	lds	r21, 0x0207	; 0x800207 <z.1885+0x1>
 1b4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 1b8:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 1bc:	00 e0       	ldi	r16, 0x00	; 0
 1be:	10 e0       	ldi	r17, 0x00	; 0
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
			{
				manchesterPtr[i] |= (1 << z);
 1c0:	cc 24       	eor	r12, r12
 1c2:	c3 94       	inc	r12
 1c4:	d1 2c       	mov	r13, r1
	static int z = 7;
	static int p = 7;

	for (int j = 0; j <= (len * 2); j++)
	{
		unsigned char ch = toBeConverted[j];
 1c6:	d7 01       	movw	r26, r14
 1c8:	ed 91       	ld	r30, X+
 1ca:	7d 01       	movw	r14, r26

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
		{
			if (ch == '\0')
 1cc:	e1 11       	cpse	r30, r1
 1ce:	08 c0       	rjmp	.+16     	; 0x1e0 <manchesterToString+0x98>
			{
				manchesterPtr[i + 1] = '\0';
 1d0:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <manchesterPtr>
 1d4:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <manchesterPtr+0x1>
 1d8:	e8 0f       	add	r30, r24
 1da:	f9 1f       	adc	r31, r25
 1dc:	11 82       	std	Z+1, r1	; 0x01
				break;
 1de:	2f c0       	rjmp	.+94     	; 0x23e <manchesterToString+0xf6>
	{
		unsigned char ch = toBeConverted[j];

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
		{
			if (ch == '\0')
 1e0:	64 e0       	ldi	r22, 0x04	; 4
 1e2:	70 e0       	ldi	r23, 0x00	; 0
			{
				z = 7;
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
			if (ch == '\0')
			{
				manchesterPtr[i + 1] = '\0';
				break;
			}
			if (p < 0)
 1e6:	33 23       	and	r19, r19
 1e8:	14 f4       	brge	.+4      	; 0x1ee <manchesterToString+0xa6>
			{
				p = 7;
 1ea:	27 e0       	ldi	r18, 0x07	; 7
 1ec:	30 e0       	ldi	r19, 0x00	; 0
			}
			if (z < 0)
 1ee:	55 23       	and	r21, r21
 1f0:	0c f0       	brlt	.+2      	; 0x1f4 <manchesterToString+0xac>
 1f2:	42 c0       	rjmp	.+132    	; 0x278 <manchesterToString+0x130>
			{
				z = 7;
				i++;
 1f4:	01 96       	adiw	r24, 0x01	; 1
				manchesterPtr[i] = '\0';
 1f6:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <manchesterPtr>
 1fa:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <manchesterPtr+0x1>
 1fe:	a8 0f       	add	r26, r24
 200:	b9 1f       	adc	r27, r25
 202:	1c 92       	st	X, r1
			{
				p = 7;
			}
			if (z < 0)
			{
				z = 7;
 204:	47 e0       	ldi	r20, 0x07	; 7
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	37 c0       	rjmp	.+110    	; 0x278 <manchesterToString+0x130>
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
			{
				manchesterPtr[i] |= (1 << z);
 20a:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <manchesterPtr>
 20e:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <manchesterPtr+0x1>
 212:	a8 0f       	add	r26, r24
 214:	b9 1f       	adc	r27, r25
 216:	e6 01       	movw	r28, r12
 218:	04 2e       	mov	r0, r20
 21a:	02 c0       	rjmp	.+4      	; 0x220 <manchesterToString+0xd8>
 21c:	cc 0f       	add	r28, r28
 21e:	dd 1f       	adc	r29, r29
 220:	0a 94       	dec	r0
 222:	e2 f7       	brpl	.-8      	; 0x21c <manchesterToString+0xd4>
 224:	dc 91       	ld	r29, X
 226:	cd 2b       	or	r28, r29
 228:	cc 93       	st	X, r28
				z--;
 22a:	41 50       	subi	r20, 0x01	; 1
 22c:	51 09       	sbc	r21, r1
				p -= 2;
 22e:	22 50       	subi	r18, 0x02	; 2
 230:	31 09       	sbc	r19, r1
 232:	2c c0       	rjmp	.+88     	; 0x28c <manchesterToString+0x144>
			}
			else /*if (ch & (0 << z) && (ch | (1 << z - 1)))*/
			{
				manchesterPtr[i] &= (255 - (0 << z));
				z--;
 234:	41 50       	subi	r20, 0x01	; 1
 236:	51 09       	sbc	r21, r1
				p -= 2;
 238:	22 50       	subi	r18, 0x02	; 2
 23a:	31 09       	sbc	r19, r1
 23c:	27 c0       	rjmp	.+78     	; 0x28c <manchesterToString+0x144>
	}
	static int i = 0;
	static int z = 7;
	static int p = 7;

	for (int j = 0; j <= (len * 2); j++)
 23e:	0f 5f       	subi	r16, 0xFF	; 255
 240:	1f 4f       	sbci	r17, 0xFF	; 255
 242:	a0 16       	cp	r10, r16
 244:	b1 06       	cpc	r11, r17
 246:	0c f0       	brlt	.+2      	; 0x24a <manchesterToString+0x102>
 248:	be cf       	rjmp	.-132    	; 0x1c6 <manchesterToString+0x7e>
 24a:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 24e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
 252:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <z.1885+0x1>
 256:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <z.1885>
 25a:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <p.1886+0x1>
 25e:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <p.1886>
				z--;
				p -= 2;
			}
		}
	}
	return manchesterPtr;
 262:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <manchesterPtr>
 266:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <manchesterPtr+0x1>
 26a:	15 c0       	rjmp	.+42     	; 0x296 <manchesterToString+0x14e>
	return manchesterPtr;													// Returnér manchesterkoden
}

unsigned char* manchesterToString(unsigned char* toBeConverted)
{
	if (toBeConverted == (unsigned char*)"") return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	12 c0       	rjmp	.+36     	; 0x296 <manchesterToString+0x14e>
	int len = ((int)(strlen((char*)toBeConverted)) / 2);
	manchesterPtr = calloc((len+1), 1);
	if (manchesterPtr == (unsigned char*)"")
	{
		return '\0';
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0f c0       	rjmp	.+30     	; 0x296 <manchesterToString+0x14e>
			{
				z = 7;
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
 278:	df 01       	movw	r26, r30
 27a:	02 2e       	mov	r0, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <manchesterToString+0x13a>
 27e:	b5 95       	asr	r27
 280:	a7 95       	ror	r26
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <manchesterToString+0x136>
 286:	a0 ff       	sbrs	r26, 0
 288:	d5 cf       	rjmp	.-86     	; 0x234 <manchesterToString+0xec>
 28a:	bf cf       	rjmp	.-130    	; 0x20a <manchesterToString+0xc2>
 28c:	61 50       	subi	r22, 0x01	; 1
 28e:	71 09       	sbc	r23, r1

	for (int j = 0; j <= (len * 2); j++)
	{
		unsigned char ch = toBeConverted[j];

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
 290:	09 f0       	breq	.+2      	; 0x294 <manchesterToString+0x14c>
 292:	a9 cf       	rjmp	.-174    	; 0x1e6 <manchesterToString+0x9e>
 294:	d4 cf       	rjmp	.-88     	; 0x23e <manchesterToString+0xf6>
				p -= 2;
			}
		}
	}
	return manchesterPtr;
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	bf 90       	pop	r11
 2a8:	af 90       	pop	r10
 2aa:	08 95       	ret

000002ac <InitUART>:
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR0;
}
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	52 2f       	mov	r21, r18
 2b2:	8b 01       	movw	r16, r22
 2b4:	9c 01       	movw	r18, r24
 2b6:	0c 52       	subi	r16, 0x2C	; 44
 2b8:	11 40       	sbci	r17, 0x01	; 1
 2ba:	21 09       	sbc	r18, r1
 2bc:	31 09       	sbc	r19, r1
 2be:	05 3d       	cpi	r16, 0xD5	; 213
 2c0:	10 4c       	sbci	r17, 0xC0	; 192
 2c2:	21 40       	sbci	r18, 0x01	; 1
 2c4:	31 05       	cpc	r19, r1
 2c6:	d0 f5       	brcc	.+116    	; 0x33c <InitUART+0x90>
 2c8:	45 50       	subi	r20, 0x05	; 5
 2ca:	44 30       	cpi	r20, 0x04	; 4
 2cc:	b8 f5       	brcc	.+110    	; 0x33c <InitUART+0x90>
 2ce:	20 e2       	ldi	r18, 0x20	; 32
 2d0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 2d4:	28 e1       	ldi	r18, 0x18	; 24
 2d6:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 2da:	44 0f       	add	r20, r20
 2dc:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 2e0:	55 34       	cpi	r21, 0x45	; 69
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <InitUART+0x44>
 2e4:	e2 ec       	ldi	r30, 0xC2	; 194
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	20 81       	ld	r18, Z
 2ea:	20 62       	ori	r18, 0x20	; 32
 2ec:	20 83       	st	Z, r18
 2ee:	07 c0       	rjmp	.+14     	; 0x2fe <InitUART+0x52>
 2f0:	5f 34       	cpi	r21, 0x4F	; 79
 2f2:	29 f4       	brne	.+10     	; 0x2fe <InitUART+0x52>
 2f4:	e2 ec       	ldi	r30, 0xC2	; 194
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	20 81       	ld	r18, Z
 2fa:	20 63       	ori	r18, 0x30	; 48
 2fc:	20 83       	st	Z, r18
 2fe:	dc 01       	movw	r26, r24
 300:	cb 01       	movw	r24, r22
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	aa 1f       	adc	r26, r26
 308:	bb 1f       	adc	r27, r27
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	9c 01       	movw	r18, r24
 314:	ad 01       	movw	r20, r26
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	44 1f       	adc	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	44 1f       	adc	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	74 e2       	ldi	r23, 0x24	; 36
 32a:	84 ef       	ldi	r24, 0xF4	; 244
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	03 d1       	rcall	.+518    	; 0x536 <__udivmodsi4>
 330:	21 50       	subi	r18, 0x01	; 1
 332:	31 09       	sbc	r19, r1
 334:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 338:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 342:	e0 ec       	ldi	r30, 0xC0	; 192
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	90 81       	ld	r25, Z
 348:	95 ff       	sbrs	r25, 5
 34a:	fd cf       	rjmp	.-6      	; 0x346 <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 34c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 350:	08 95       	ret

00000352 <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 358:	88 81       	ld	r24, Y
 35a:	88 23       	and	r24, r24
 35c:	29 f0       	breq	.+10     	; 0x368 <SendString+0x16>
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 35e:	21 96       	adiw	r28, 0x01	; 1
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 360:	f0 df       	rcall	.-32     	; 0x342 <SendChar>
 362:	89 91       	ld	r24, Y+
 364:	81 11       	cpse	r24, r1
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 366:	fc cf       	rjmp	.-8      	; 0x360 <SendString+0xe>
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <start1msDelay>:
}

void start1msDelay()
{
	// Timer3: Normal mode, PS = 0
	TCCR3A = 0b00000000;
 36e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00000001;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	// Overflow hvert MS.
	//Sæt timerStatus til '1' (=going)
	//timerStatus_3 = '1';
	TCNT3 = (0xFFFF-16000);
 378:	8f e7       	ldi	r24, 0x7F	; 127
 37a:	91 ec       	ldi	r25, 0xC1	; 193
 37c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 380:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	while ((TIFR3 & (1<<0)) == 0)
 384:	c0 9b       	sbis	0x18, 0	; 24
 386:	fe cf       	rjmp	.-4      	; 0x384 <start1msDelay+0x16>
	{}
	TCCR3B = 0;
 388:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIFR3 = 1<<0;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	88 bb       	out	0x18, r24	; 24
 390:	08 95       	ret

00000392 <start400usDelay>:
}

void start400usDelay()
{
	// Timer4: Normal mode, PS = 0
	TCCR4A = 0b00000000;
 392:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = 0b00000001;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	// Overflow hvert MS.
	//Sæt timerStatus til '1' (=going)
	//timerStatus_3 = '1';
	TCNT4 = 63936;
 39c:	80 ec       	ldi	r24, 0xC0	; 192
 39e:	99 ef       	ldi	r25, 0xF9	; 249
 3a0:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 3a4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
	while ((TIFR4 & (1<<0)) == 0)
 3a8:	c8 9b       	sbis	0x19, 0	; 25
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <start400usDelay+0x16>
	{}
	TCCR4B = 0;
 3ac:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TIFR4 = 1<<0;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	89 bb       	out	0x19, r24	; 25
 3b4:	08 95       	ret

000003b6 <ventPaaZC>:
return receive;
}

void ventPaaZC()
{
	ZCDetected_ = 0;
 3b6:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <ZCDetected_+0x1>
 3ba:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <ZCDetected_>
	while(ZCDetected_ == 0)	{}
 3be:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <ZCDetected_>
 3c2:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <ZCDetected_+0x1>
 3c6:	89 2b       	or	r24, r25
 3c8:	d1 f3       	breq	.-12     	; 0x3be <ventPaaZC+0x8>
}
 3ca:	08 95       	ret

000003cc <receiveBurst>:
	TIFR4 = 1<<0;
	//timerStatus_3 = '0';
}

unsigned char* receiveBurst()
{
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
	while (!(PINF & (1 << 7)))
 3d4:	7f 9b       	sbis	0x0f, 7	; 15
 3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <receiveBurst+0x8>
	{}

	for (j = 7; j >= 0; j--)
 3d8:	87 e0       	ldi	r24, 0x07	; 7
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <j+0x1>
 3e0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <j>
		{
			firstByteReceived |= 1 << j;
		}
		else
		{
			firstByteReceived &= ~(1 << j);
 3e4:	c1 e0       	ldi	r28, 0x01	; 1
 3e6:	d0 e0       	ldi	r29, 0x00	; 0
	while (!(PINF & (1 << 7)))
	{}

	for (j = 7; j >= 0; j--)
	{
		if (PINF & (1 << 7))
 3e8:	7f 9b       	sbis	0x0f, 7	; 15
 3ea:	0d c0       	rjmp	.+26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		{
			firstByteReceived |= 1 << j;
 3ec:	9e 01       	movw	r18, r28
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <receiveBurst+0x28>
 3f0:	22 0f       	add	r18, r18
 3f2:	33 1f       	adc	r19, r19
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <receiveBurst+0x24>
 3f8:	c9 01       	movw	r24, r18
 3fa:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <firstByteReceived>
 3fe:	89 2b       	or	r24, r25
 400:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <firstByteReceived>
 404:	0d c0       	rjmp	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		}
		else
		{
			firstByteReceived &= ~(1 << j);
 406:	9e 01       	movw	r18, r28
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	c9 01       	movw	r24, r18
 414:	80 95       	com	r24
 416:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <firstByteReceived>
 41a:	89 23       	and	r24, r25
 41c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <firstByteReceived>
		}
		ventPaaZC();
		start1msDelay();
 420:	ca df       	rcall	.-108    	; 0x3b6 <ventPaaZC>
 422:	a5 df       	rcall	.-182    	; 0x36e <start1msDelay>
 424:	a4 df       	rcall	.-184    	; 0x36e <start1msDelay>
 426:	b5 df       	rcall	.-150    	; 0x392 <start400usDelay>
 428:	b4 df       	rcall	.-152    	; 0x392 <start400usDelay>
 42a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <j>
 42e:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <j+0x1>
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <j+0x1>
 438:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <j>
 43c:	99 23       	and	r25, r25
 43e:	a4 f6       	brge	.-88     	; 0x3e8 <receiveBurst+0x1c>
 440:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <firstByteReceived>
 444:	8e 3e       	cpi	r24, 0xEE	; 238
 446:	09 f0       	breq	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	54 c0       	rjmp	.+168    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 44a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <i+0x1>
 44e:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <i>
 452:	07 e0       	ldi	r16, 0x07	; 7
 454:	10 e0       	ldi	r17, 0x00	; 0
 456:	c1 e0       	ldi	r28, 0x01	; 1
 458:	d0 e0       	ldi	r29, 0x00	; 0
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45c:	04 97       	sbiw	r24, 0x04	; 4
 45e:	19 f4       	brne	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 460:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <ZCDetected_>
 464:	46 c0       	rjmp	.+140    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 466:	00 93 19 02 	sts	0x0219, r16	; 0x800219 <j>
 46a:	10 93 1a 02 	sts	0x021A, r17	; 0x80021a <j+0x1>
 46e:	80 2f       	mov	r24, r16
 470:	7f 9b       	sbis	0x0f, 7	; 15
 472:	11 c0       	rjmp	.+34     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 474:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <i>
 478:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <i+0x1>
 47c:	ef 5e       	subi	r30, 0xEF	; 239
 47e:	fd 4f       	sbci	r31, 0xFD	; 253
 480:	9e 01       	movw	r18, r28
 482:	02 c0       	rjmp	.+4      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	8a 95       	dec	r24
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 48c:	c9 01       	movw	r24, r18
 48e:	90 81       	ld	r25, Z
 490:	89 2b       	or	r24, r25
 492:	80 83       	st	Z, r24
 494:	11 c0       	rjmp	.+34     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 496:	e0 91 1d 02 	lds	r30, 0x021D	; 0x80021d <i>
 49a:	f0 91 1e 02 	lds	r31, 0x021E	; 0x80021e <i+0x1>
 49e:	ef 5e       	subi	r30, 0xEF	; 239
 4a0:	fd 4f       	sbci	r31, 0xFD	; 253
 4a2:	9e 01       	movw	r18, r28
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a6:	22 0f       	add	r18, r18
 4a8:	33 1f       	adc	r19, r19
 4aa:	8a 95       	dec	r24
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4ae:	c9 01       	movw	r24, r18
 4b0:	80 95       	com	r24
 4b2:	90 81       	ld	r25, Z
 4b4:	89 23       	and	r24, r25
 4b6:	80 83       	st	Z, r24
 4b8:	7e df       	rcall	.-260    	; 0x3b6 <ventPaaZC>
 4ba:	59 df       	rcall	.-334    	; 0x36e <start1msDelay>
 4bc:	58 df       	rcall	.-336    	; 0x36e <start1msDelay>
 4be:	69 df       	rcall	.-302    	; 0x392 <start400usDelay>
 4c0:	68 df       	rcall	.-304    	; 0x392 <start400usDelay>
 4c2:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <j>
 4c6:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <j+0x1>
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <j+0x1>
 4d0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <j>
 4d4:	99 23       	and	r25, r25
 4d6:	64 f6       	brge	.-104    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 4d8:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <i>
 4dc:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <i+0x1>
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <i+0x1>
 4e6:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <i>
 4ea:	85 30       	cpi	r24, 0x05	; 5
 4ec:	91 05       	cpc	r25, r1
 4ee:	0c f4       	brge	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f0:	b5 cf       	rjmp	.-150    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 4f2:	81 e1       	ldi	r24, 0x11	; 17
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	08 95       	ret

00000500 <initZCDetector>:
 void initZCDetector()
 {
	 //------------------------------------//
	 //			 interrupt test			  //
	 //------------------------------------//
	 DDRD &= ~(1 << 0);
 500:	50 98       	cbi	0x0a, 0	; 10
	 // PD2 (PCINT0 pin) is now an input
	 PORTD |= (1 << 0);
 502:	58 9a       	sbi	0x0b, 0	; 11
	 // PD2 is now an input with pull-up enabled
	 //EICRA |= (1 << ISC11) | (1 << ISC10);   // set INT0 to trigger on ANY logic change
	 EICRA = 0b00000011;
 504:	83 e0       	ldi	r24, 0x03	; 3
 506:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	 EIMSK |= (1 << 0);
 50a:	e8 9a       	sbi	0x1d, 0	; 29
 50c:	08 95       	ret

0000050e <__vector_1>:

 }

 // Interrupt service routine for INT0 (Er INT3 for Atmega 2560)
 ISR(INT0_vect)
 {
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	8f 93       	push	r24
 51a:	9f 93       	push	r25
	 ZCDetected_ = 1;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <ZCDetected_+0x1>
 524:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <ZCDetected_>
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <__udivmodsi4>:
 536:	a1 e2       	ldi	r26, 0x21	; 33
 538:	1a 2e       	mov	r1, r26
 53a:	aa 1b       	sub	r26, r26
 53c:	bb 1b       	sub	r27, r27
 53e:	fd 01       	movw	r30, r26
 540:	0d c0       	rjmp	.+26     	; 0x55c <__udivmodsi4_ep>

00000542 <__udivmodsi4_loop>:
 542:	aa 1f       	adc	r26, r26
 544:	bb 1f       	adc	r27, r27
 546:	ee 1f       	adc	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	a2 17       	cp	r26, r18
 54c:	b3 07       	cpc	r27, r19
 54e:	e4 07       	cpc	r30, r20
 550:	f5 07       	cpc	r31, r21
 552:	20 f0       	brcs	.+8      	; 0x55c <__udivmodsi4_ep>
 554:	a2 1b       	sub	r26, r18
 556:	b3 0b       	sbc	r27, r19
 558:	e4 0b       	sbc	r30, r20
 55a:	f5 0b       	sbc	r31, r21

0000055c <__udivmodsi4_ep>:
 55c:	66 1f       	adc	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	1a 94       	dec	r1
 566:	69 f7       	brne	.-38     	; 0x542 <__udivmodsi4_loop>
 568:	60 95       	com	r22
 56a:	70 95       	com	r23
 56c:	80 95       	com	r24
 56e:	90 95       	com	r25
 570:	9b 01       	movw	r18, r22
 572:	ac 01       	movw	r20, r24
 574:	bd 01       	movw	r22, r26
 576:	cf 01       	movw	r24, r30
 578:	08 95       	ret

0000057a <calloc>:
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	86 9f       	mul	r24, r22
 584:	80 01       	movw	r16, r0
 586:	87 9f       	mul	r24, r23
 588:	10 0d       	add	r17, r0
 58a:	96 9f       	mul	r25, r22
 58c:	10 0d       	add	r17, r0
 58e:	11 24       	eor	r1, r1
 590:	c8 01       	movw	r24, r16
 592:	0d d0       	rcall	.+26     	; 0x5ae <malloc>
 594:	ec 01       	movw	r28, r24
 596:	00 97       	sbiw	r24, 0x00	; 0
 598:	21 f0       	breq	.+8      	; 0x5a2 <calloc+0x28>
 59a:	a8 01       	movw	r20, r16
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	27 d1       	rcall	.+590    	; 0x7f0 <memset>
 5a2:	ce 01       	movw	r24, r28
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	08 95       	ret

000005ae <malloc>:
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	82 30       	cpi	r24, 0x02	; 2
 5b8:	91 05       	cpc	r25, r1
 5ba:	10 f4       	brcc	.+4      	; 0x5c0 <malloc+0x12>
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <__flp>
 5c4:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <__flp+0x1>
 5c8:	20 e0       	ldi	r18, 0x00	; 0
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	a0 e0       	ldi	r26, 0x00	; 0
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	30 97       	sbiw	r30, 0x00	; 0
 5d2:	19 f1       	breq	.+70     	; 0x61a <malloc+0x6c>
 5d4:	40 81       	ld	r20, Z
 5d6:	51 81       	ldd	r21, Z+1	; 0x01
 5d8:	02 81       	ldd	r16, Z+2	; 0x02
 5da:	13 81       	ldd	r17, Z+3	; 0x03
 5dc:	48 17       	cp	r20, r24
 5de:	59 07       	cpc	r21, r25
 5e0:	c8 f0       	brcs	.+50     	; 0x614 <malloc+0x66>
 5e2:	84 17       	cp	r24, r20
 5e4:	95 07       	cpc	r25, r21
 5e6:	69 f4       	brne	.+26     	; 0x602 <malloc+0x54>
 5e8:	10 97       	sbiw	r26, 0x00	; 0
 5ea:	31 f0       	breq	.+12     	; 0x5f8 <malloc+0x4a>
 5ec:	12 96       	adiw	r26, 0x02	; 2
 5ee:	0c 93       	st	X, r16
 5f0:	12 97       	sbiw	r26, 0x02	; 2
 5f2:	13 96       	adiw	r26, 0x03	; 3
 5f4:	1c 93       	st	X, r17
 5f6:	27 c0       	rjmp	.+78     	; 0x646 <malloc+0x98>
 5f8:	00 93 21 02 	sts	0x0221, r16	; 0x800221 <__flp>
 5fc:	10 93 22 02 	sts	0x0222, r17	; 0x800222 <__flp+0x1>
 600:	22 c0       	rjmp	.+68     	; 0x646 <malloc+0x98>
 602:	21 15       	cp	r18, r1
 604:	31 05       	cpc	r19, r1
 606:	19 f0       	breq	.+6      	; 0x60e <malloc+0x60>
 608:	42 17       	cp	r20, r18
 60a:	53 07       	cpc	r21, r19
 60c:	18 f4       	brcc	.+6      	; 0x614 <malloc+0x66>
 60e:	9a 01       	movw	r18, r20
 610:	bd 01       	movw	r22, r26
 612:	ef 01       	movw	r28, r30
 614:	df 01       	movw	r26, r30
 616:	f8 01       	movw	r30, r16
 618:	db cf       	rjmp	.-74     	; 0x5d0 <malloc+0x22>
 61a:	21 15       	cp	r18, r1
 61c:	31 05       	cpc	r19, r1
 61e:	f9 f0       	breq	.+62     	; 0x65e <malloc+0xb0>
 620:	28 1b       	sub	r18, r24
 622:	39 0b       	sbc	r19, r25
 624:	24 30       	cpi	r18, 0x04	; 4
 626:	31 05       	cpc	r19, r1
 628:	80 f4       	brcc	.+32     	; 0x64a <malloc+0x9c>
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	9b 81       	ldd	r25, Y+3	; 0x03
 62e:	61 15       	cp	r22, r1
 630:	71 05       	cpc	r23, r1
 632:	21 f0       	breq	.+8      	; 0x63c <malloc+0x8e>
 634:	fb 01       	movw	r30, r22
 636:	93 83       	std	Z+3, r25	; 0x03
 638:	82 83       	std	Z+2, r24	; 0x02
 63a:	04 c0       	rjmp	.+8      	; 0x644 <malloc+0x96>
 63c:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <__flp+0x1>
 640:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__flp>
 644:	fe 01       	movw	r30, r28
 646:	32 96       	adiw	r30, 0x02	; 2
 648:	44 c0       	rjmp	.+136    	; 0x6d2 <malloc+0x124>
 64a:	fe 01       	movw	r30, r28
 64c:	e2 0f       	add	r30, r18
 64e:	f3 1f       	adc	r31, r19
 650:	81 93       	st	Z+, r24
 652:	91 93       	st	Z+, r25
 654:	22 50       	subi	r18, 0x02	; 2
 656:	31 09       	sbc	r19, r1
 658:	39 83       	std	Y+1, r19	; 0x01
 65a:	28 83       	st	Y, r18
 65c:	3a c0       	rjmp	.+116    	; 0x6d2 <malloc+0x124>
 65e:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <__brkval>
 662:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <__brkval+0x1>
 666:	23 2b       	or	r18, r19
 668:	41 f4       	brne	.+16     	; 0x67a <malloc+0xcc>
 66a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 66e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 672:	30 93 20 02 	sts	0x0220, r19	; 0x800220 <__brkval+0x1>
 676:	20 93 1f 02 	sts	0x021F, r18	; 0x80021f <__brkval>
 67a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 67e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 682:	21 15       	cp	r18, r1
 684:	31 05       	cpc	r19, r1
 686:	41 f4       	brne	.+16     	; 0x698 <malloc+0xea>
 688:	2d b7       	in	r18, 0x3d	; 61
 68a:	3e b7       	in	r19, 0x3e	; 62
 68c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 690:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 694:	24 1b       	sub	r18, r20
 696:	35 0b       	sbc	r19, r21
 698:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <__brkval>
 69c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <__brkval+0x1>
 6a0:	e2 17       	cp	r30, r18
 6a2:	f3 07       	cpc	r31, r19
 6a4:	a0 f4       	brcc	.+40     	; 0x6ce <malloc+0x120>
 6a6:	2e 1b       	sub	r18, r30
 6a8:	3f 0b       	sbc	r19, r31
 6aa:	28 17       	cp	r18, r24
 6ac:	39 07       	cpc	r19, r25
 6ae:	78 f0       	brcs	.+30     	; 0x6ce <malloc+0x120>
 6b0:	ac 01       	movw	r20, r24
 6b2:	4e 5f       	subi	r20, 0xFE	; 254
 6b4:	5f 4f       	sbci	r21, 0xFF	; 255
 6b6:	24 17       	cp	r18, r20
 6b8:	35 07       	cpc	r19, r21
 6ba:	48 f0       	brcs	.+18     	; 0x6ce <malloc+0x120>
 6bc:	4e 0f       	add	r20, r30
 6be:	5f 1f       	adc	r21, r31
 6c0:	50 93 20 02 	sts	0x0220, r21	; 0x800220 <__brkval+0x1>
 6c4:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <__brkval>
 6c8:	81 93       	st	Z+, r24
 6ca:	91 93       	st	Z+, r25
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <malloc+0x124>
 6ce:	e0 e0       	ldi	r30, 0x00	; 0
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	cf 01       	movw	r24, r30
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	1f 91       	pop	r17
 6da:	0f 91       	pop	r16
 6dc:	08 95       	ret

000006de <free>:
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	00 97       	sbiw	r24, 0x00	; 0
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <free+0xa>
 6e6:	81 c0       	rjmp	.+258    	; 0x7ea <free+0x10c>
 6e8:	fc 01       	movw	r30, r24
 6ea:	32 97       	sbiw	r30, 0x02	; 2
 6ec:	13 82       	std	Z+3, r1	; 0x03
 6ee:	12 82       	std	Z+2, r1	; 0x02
 6f0:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <__flp>
 6f4:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <__flp+0x1>
 6f8:	10 97       	sbiw	r26, 0x00	; 0
 6fa:	81 f4       	brne	.+32     	; 0x71c <free+0x3e>
 6fc:	20 81       	ld	r18, Z
 6fe:	31 81       	ldd	r19, Z+1	; 0x01
 700:	82 0f       	add	r24, r18
 702:	93 1f       	adc	r25, r19
 704:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <__brkval>
 708:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <__brkval+0x1>
 70c:	28 17       	cp	r18, r24
 70e:	39 07       	cpc	r19, r25
 710:	51 f5       	brne	.+84     	; 0x766 <free+0x88>
 712:	f0 93 20 02 	sts	0x0220, r31	; 0x800220 <__brkval+0x1>
 716:	e0 93 1f 02 	sts	0x021F, r30	; 0x80021f <__brkval>
 71a:	67 c0       	rjmp	.+206    	; 0x7ea <free+0x10c>
 71c:	ed 01       	movw	r28, r26
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	ce 17       	cp	r28, r30
 724:	df 07       	cpc	r29, r31
 726:	40 f4       	brcc	.+16     	; 0x738 <free+0x5a>
 728:	4a 81       	ldd	r20, Y+2	; 0x02
 72a:	5b 81       	ldd	r21, Y+3	; 0x03
 72c:	9e 01       	movw	r18, r28
 72e:	41 15       	cp	r20, r1
 730:	51 05       	cpc	r21, r1
 732:	f1 f0       	breq	.+60     	; 0x770 <free+0x92>
 734:	ea 01       	movw	r28, r20
 736:	f5 cf       	rjmp	.-22     	; 0x722 <free+0x44>
 738:	d3 83       	std	Z+3, r29	; 0x03
 73a:	c2 83       	std	Z+2, r28	; 0x02
 73c:	40 81       	ld	r20, Z
 73e:	51 81       	ldd	r21, Z+1	; 0x01
 740:	84 0f       	add	r24, r20
 742:	95 1f       	adc	r25, r21
 744:	c8 17       	cp	r28, r24
 746:	d9 07       	cpc	r29, r25
 748:	59 f4       	brne	.+22     	; 0x760 <free+0x82>
 74a:	88 81       	ld	r24, Y
 74c:	99 81       	ldd	r25, Y+1	; 0x01
 74e:	84 0f       	add	r24, r20
 750:	95 1f       	adc	r25, r21
 752:	02 96       	adiw	r24, 0x02	; 2
 754:	91 83       	std	Z+1, r25	; 0x01
 756:	80 83       	st	Z, r24
 758:	8a 81       	ldd	r24, Y+2	; 0x02
 75a:	9b 81       	ldd	r25, Y+3	; 0x03
 75c:	93 83       	std	Z+3, r25	; 0x03
 75e:	82 83       	std	Z+2, r24	; 0x02
 760:	21 15       	cp	r18, r1
 762:	31 05       	cpc	r19, r1
 764:	29 f4       	brne	.+10     	; 0x770 <free+0x92>
 766:	f0 93 22 02 	sts	0x0222, r31	; 0x800222 <__flp+0x1>
 76a:	e0 93 21 02 	sts	0x0221, r30	; 0x800221 <__flp>
 76e:	3d c0       	rjmp	.+122    	; 0x7ea <free+0x10c>
 770:	e9 01       	movw	r28, r18
 772:	fb 83       	std	Y+3, r31	; 0x03
 774:	ea 83       	std	Y+2, r30	; 0x02
 776:	49 91       	ld	r20, Y+
 778:	59 91       	ld	r21, Y+
 77a:	c4 0f       	add	r28, r20
 77c:	d5 1f       	adc	r29, r21
 77e:	ec 17       	cp	r30, r28
 780:	fd 07       	cpc	r31, r29
 782:	61 f4       	brne	.+24     	; 0x79c <free+0xbe>
 784:	80 81       	ld	r24, Z
 786:	91 81       	ldd	r25, Z+1	; 0x01
 788:	84 0f       	add	r24, r20
 78a:	95 1f       	adc	r25, r21
 78c:	02 96       	adiw	r24, 0x02	; 2
 78e:	e9 01       	movw	r28, r18
 790:	99 83       	std	Y+1, r25	; 0x01
 792:	88 83       	st	Y, r24
 794:	82 81       	ldd	r24, Z+2	; 0x02
 796:	93 81       	ldd	r25, Z+3	; 0x03
 798:	9b 83       	std	Y+3, r25	; 0x03
 79a:	8a 83       	std	Y+2, r24	; 0x02
 79c:	e0 e0       	ldi	r30, 0x00	; 0
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	12 96       	adiw	r26, 0x02	; 2
 7a2:	8d 91       	ld	r24, X+
 7a4:	9c 91       	ld	r25, X
 7a6:	13 97       	sbiw	r26, 0x03	; 3
 7a8:	00 97       	sbiw	r24, 0x00	; 0
 7aa:	19 f0       	breq	.+6      	; 0x7b2 <free+0xd4>
 7ac:	fd 01       	movw	r30, r26
 7ae:	dc 01       	movw	r26, r24
 7b0:	f7 cf       	rjmp	.-18     	; 0x7a0 <free+0xc2>
 7b2:	8d 91       	ld	r24, X+
 7b4:	9c 91       	ld	r25, X
 7b6:	11 97       	sbiw	r26, 0x01	; 1
 7b8:	9d 01       	movw	r18, r26
 7ba:	2e 5f       	subi	r18, 0xFE	; 254
 7bc:	3f 4f       	sbci	r19, 0xFF	; 255
 7be:	82 0f       	add	r24, r18
 7c0:	93 1f       	adc	r25, r19
 7c2:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <__brkval>
 7c6:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <__brkval+0x1>
 7ca:	28 17       	cp	r18, r24
 7cc:	39 07       	cpc	r19, r25
 7ce:	69 f4       	brne	.+26     	; 0x7ea <free+0x10c>
 7d0:	30 97       	sbiw	r30, 0x00	; 0
 7d2:	29 f4       	brne	.+10     	; 0x7de <free+0x100>
 7d4:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__flp+0x1>
 7d8:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <__flp>
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <free+0x104>
 7de:	13 82       	std	Z+3, r1	; 0x03
 7e0:	12 82       	std	Z+2, r1	; 0x02
 7e2:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <__brkval+0x1>
 7e6:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <__brkval>
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	08 95       	ret

000007f0 <memset>:
 7f0:	dc 01       	movw	r26, r24
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <memset+0x6>
 7f4:	6d 93       	st	X+, r22
 7f6:	41 50       	subi	r20, 0x01	; 1
 7f8:	50 40       	sbci	r21, 0x00	; 0
 7fa:	e0 f7       	brcc	.-8      	; 0x7f4 <memset+0x4>
 7fc:	08 95       	ret

000007fe <_exit>:
 7fe:	f8 94       	cli

00000800 <__stop_program>:
 800:	ff cf       	rjmp	.-2      	; 0x800 <__stop_program>
