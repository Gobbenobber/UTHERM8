
CENTRALCOMPUTER_MIKROCONTROLLER_MODTAGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001312  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f5c  00000000  00000000  0000172e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000775  00000000  00000000  0000268a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000718  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c0  00000000  00000000  000036b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	f8 c0       	rjmp	.+496    	; 0x1f6 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e6       	ldi	r30, 0x66	; 102
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 30       	cpi	r26, 0x04	; 4
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	a0 c0       	rjmp	.+320    	; 0x262 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

int main(void)
{
	//Initializing
	initZCDetector();
	initBurst();
 124:	61 d0       	rcall	.+194    	; 0x1e8 <initZCDetector>
 126:	54 d0       	rcall	.+168    	; 0x1d0 <initBurst>
	//Streng med data som skal sendes.
	
	// Global interrupt enable
	sei();
 128:	78 94       	sei
	
	unsigned char* konverteretStreng;
	char* buffer = "";

	InitUART(9600,8,'N');
 12a:	4e e4       	ldi	r20, 0x4E	; 78
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	68 e0       	ldi	r22, 0x08	; 8
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	95 e2       	ldi	r25, 0x25	; 37
 136:	01 d0       	rcall	.+2      	; 0x13a <InitUART>
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x14>

0000013a <InitUART>:
	BaudRate: Wanted Baud Rate (300-115200).
	Databits: Wanted number of Data Bits (5-8).
	Parity: 'E' (Even parity), 'O' (Odd parity), otherwise No Parity.
*************************************************************************/
void InitUART(unsigned long BaudRate, unsigned char DataBit, char Parity)
{
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	52 2f       	mov	r21, r18
  if ((BaudRate >= 300) && (BaudRate <= 115200) && (DataBit >=5) && (DataBit <= 8))
 140:	8b 01       	movw	r16, r22
 142:	9c 01       	movw	r18, r24
 144:	0c 52       	subi	r16, 0x2C	; 44
 146:	11 40       	sbci	r17, 0x01	; 1
 148:	21 09       	sbc	r18, r1
 14a:	31 09       	sbc	r19, r1
 14c:	05 3d       	cpi	r16, 0xD5	; 213
 14e:	10 4c       	sbci	r17, 0xC0	; 192
 150:	21 40       	sbci	r18, 0x01	; 1
 152:	31 05       	cpc	r19, r1
 154:	d0 f5       	brcc	.+116    	; 0x1ca <InitUART+0x90>
 156:	45 50       	subi	r20, 0x05	; 5
 158:	44 30       	cpi	r20, 0x04	; 4
 15a:	b8 f5       	brcc	.+110    	; 0x1ca <InitUART+0x90>
  { 
    // "Normal" clock, no multiprocessor mode (= default)
    UCSR0A = 0b00100000;
 15c:	20 e2       	ldi	r18, 0x20	; 32
 15e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
    // No interrupts enabled
    // Receiver enabled
    // Transmitter enabled
    // No 9 bit operation
    UCSR0B = 0b00011000;	
 162:	28 e1       	ldi	r18, 0x18	; 24
 164:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    // Asynchronous operation, 1 stop bit
    // Bit 2 and bit 1 controls the number of data bits
    UCSR0C = (DataBit-5)<<1;
 168:	44 0f       	add	r20, r20
 16a:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	// Set parity bits (if parity used)
	if (Parity == 'E')
 16e:	55 34       	cpi	r21, 0x45	; 69
 170:	31 f4       	brne	.+12     	; 0x17e <InitUART+0x44>
      UCSR0C |= 0b00100000;
 172:	e2 ec       	ldi	r30, 0xC2	; 194
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	20 81       	ld	r18, Z
 178:	20 62       	ori	r18, 0x20	; 32
 17a:	20 83       	st	Z, r18
 17c:	07 c0       	rjmp	.+14     	; 0x18c <InitUART+0x52>
    else if (Parity == 'O')	  
 17e:	5f 34       	cpi	r21, 0x4F	; 79
 180:	29 f4       	brne	.+10     	; 0x18c <InitUART+0x52>
      UCSR0C |= 0b00110000;	
 182:	e2 ec       	ldi	r30, 0xC2	; 194
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	20 81       	ld	r18, Z
 188:	20 63       	ori	r18, 0x30	; 48
 18a:	20 83       	st	Z, r18
    // Set Baud Rate according to the parameter BaudRate:
    UBRR0 = XTAL/(16*BaudRate) - 1;
 18c:	dc 01       	movw	r26, r24
 18e:	cb 01       	movw	r24, r22
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	aa 1f       	adc	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	9c 01       	movw	r18, r24
 1a2:	ad 01       	movw	r20, r26
 1a4:	22 0f       	add	r18, r18
 1a6:	33 1f       	adc	r19, r19
 1a8:	44 1f       	adc	r20, r20
 1aa:	55 1f       	adc	r21, r21
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	44 1f       	adc	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	74 e2       	ldi	r23, 0x24	; 36
 1b8:	84 ef       	ldi	r24, 0xF4	; 244
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	30 d0       	rcall	.+96     	; 0x21e <__udivmodsi4>
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	31 09       	sbc	r19, r1
 1c2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 1c6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
  }  
}
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <initBurst>:
}

void initBurst()
{
	// PH = input (burst not outgoing)
	DDRH = 0;
 1d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	// Toggle OC2B on compare match
	// Mode = 4 (CTC)
	// Clock prescaler = 1
	TCCR2A = 0b00010000;
 1d4:	80 e1       	ldi	r24, 0x10	; 16
 1d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
	TCCR2B = 0b00000001;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
	// Frekvens = 120.3 kHz
	// 120kHz = 16000000Hz/(2*1*(1+OCR1A))  --> OCR1A = 131.33...
	OCR2B = 131;
 1e0:	83 e8       	ldi	r24, 0x83	; 131
 1e2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
 1e6:	08 95       	ret

000001e8 <initZCDetector>:
 void initZCDetector()
 {
	 //------------------------------------//
	 //			 interrupt test			  //
	 //------------------------------------//
	 DDRD &= ~(1 << 0);
 1e8:	50 98       	cbi	0x0a, 0	; 10
	 // PD2 (PCINT0 pin) is now an input
	 PORTD |= (1 << 0);
 1ea:	58 9a       	sbi	0x0b, 0	; 11
	 // PD2 is now an input with pull-up enabled
	 //EICRA |= (1 << ISC11) | (1 << ISC10);   // set INT0 to trigger on ANY logic change
	 EICRA = 0b00000011;
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	 EIMSK |= (1 << 0);
 1f2:	e8 9a       	sbi	0x1d, 0	; 29
 1f4:	08 95       	ret

000001f6 <__vector_1>:

 }

 // Interrupt service routine for INT0 (Er INT3 for Atmega 2560)
 ISR(INT0_vect)
 {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
	 ZCDetected_ = 1;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_end+0x1>
 20c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__udivmodsi4>:
 21e:	a1 e2       	ldi	r26, 0x21	; 33
 220:	1a 2e       	mov	r1, r26
 222:	aa 1b       	sub	r26, r26
 224:	bb 1b       	sub	r27, r27
 226:	fd 01       	movw	r30, r26
 228:	0d c0       	rjmp	.+26     	; 0x244 <__udivmodsi4_ep>

0000022a <__udivmodsi4_loop>:
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	ee 1f       	adc	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	a2 17       	cp	r26, r18
 234:	b3 07       	cpc	r27, r19
 236:	e4 07       	cpc	r30, r20
 238:	f5 07       	cpc	r31, r21
 23a:	20 f0       	brcs	.+8      	; 0x244 <__udivmodsi4_ep>
 23c:	a2 1b       	sub	r26, r18
 23e:	b3 0b       	sbc	r27, r19
 240:	e4 0b       	sbc	r30, r20
 242:	f5 0b       	sbc	r31, r21

00000244 <__udivmodsi4_ep>:
 244:	66 1f       	adc	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	88 1f       	adc	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	1a 94       	dec	r1
 24e:	69 f7       	brne	.-38     	; 0x22a <__udivmodsi4_loop>
 250:	60 95       	com	r22
 252:	70 95       	com	r23
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	9b 01       	movw	r18, r22
 25a:	ac 01       	movw	r20, r24
 25c:	bd 01       	movw	r22, r26
 25e:	cf 01       	movw	r24, r30
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
