
CENTRALCOMPUTER_MIKROCONTROLLER_MODTAGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000007e2  00000876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800208  00800208  0000087e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152c  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe1  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b18  00000000  00000000  00002f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00003a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c6  00000000  00000000  00003cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000787  00000000  00000000  00004486  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00004c0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	74 c2       	rjmp	.+1256   	; 0x4ee <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ee       	ldi	r30, 0xE2	; 226
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 31       	cpi	r26, 0x1E	; 30
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	5e c3       	rjmp	.+1724   	; 0x7de <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

int main(void)
{
	
	//Initiér UART og ZCDetector.
	InitUART(9600,8,'N');
 124:	2e e4       	ldi	r18, 0x4E	; 78
 126:	48 e0       	ldi	r20, 0x08	; 8
 128:	60 e8       	ldi	r22, 0x80	; 128
 12a:	75 e2       	ldi	r23, 0x25	; 37
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
	initZCDetector();
 130:	ab d0       	rcall	.+342    	; 0x288 <InitUART>
 132:	d6 d1       	rcall	.+940    	; 0x4e0 <initZCDetector>

	//PINA7 = INPUTS!
	DDRF &= ~(1 << 7);
 134:	87 98       	cbi	0x10, 7	; 16
	//static char konverteretDataTemp[5];
	//int h;
	//int w = 1;
	while(1)
	{	
		while (!(PINF & (1 << 7)))
 136:	78 94       	sei
 138:	7f 9b       	sbis	0x0f, 7	; 15
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0x14>
 13c:	35 d1       	rcall	.+618    	; 0x3a8 <receiveBurst>
 13e:	02 d0       	rcall	.+4      	; 0x144 <manchesterToString>
 140:	f6 d0       	rcall	.+492    	; 0x32e <SendString>
 142:	fa cf       	rjmp	.-12     	; 0x138 <main+0x14>

00000144 <manchesterToString>:
	}
	return manchesterPtr;													// Returnér manchesterkoden
}

unsigned char* manchesterToString(unsigned char* toBeConverted)
{
 144:	6f 92       	push	r6
 146:	7f 92       	push	r7
 148:	8f 92       	push	r8
 14a:	9f 92       	push	r9
 14c:	af 92       	push	r10
 14e:	bf 92       	push	r11
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	if (toBeConverted == (unsigned char*)"") return 0;
 160:	22 e0       	ldi	r18, 0x02	; 2
 162:	86 30       	cpi	r24, 0x06	; 6
 164:	92 07       	cpc	r25, r18
 166:	09 f4       	brne	.+2      	; 0x16a <manchesterToString+0x26>
 168:	69 c0       	rjmp	.+210    	; 0x23c <manchesterToString+0xf8>
	int len = ((int)(strlen((char*)toBeConverted)) / 2);
 16a:	fc 01       	movw	r30, r24
 16c:	01 90       	ld	r0, Z+
 16e:	00 20       	and	r0, r0
 170:	e9 f7       	brne	.-6      	; 0x16c <manchesterToString+0x28>
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	e8 1b       	sub	r30, r24
 176:	f9 0b       	sbc	r31, r25
 178:	ef 01       	movw	r28, r30
 17a:	0a f4       	brpl	.+2      	; 0x17e <manchesterToString+0x3a>
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	8c 01       	movw	r16, r24
 180:	d5 95       	asr	r29
 182:	c7 95       	ror	r28
	manchesterPtr = calloc((len+1), 1);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	e6 d1       	rcall	.+972    	; 0x55a <calloc>
 18e:	6c 01       	movw	r12, r24
 190:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 194:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
	if (manchesterPtr == (unsigned char*)"")
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	86 30       	cpi	r24, 0x06	; 6
 19c:	96 07       	cpc	r25, r22
 19e:	09 f4       	brne	.+2      	; 0x1a2 <manchesterToString+0x5e>
 1a0:	50 c0       	rjmp	.+160    	; 0x242 <manchesterToString+0xfe>
	}
	int i = 0;
	int z = 7;
	int p = 7;

	for (int j = 0; j <= (len * 2); j++)
 1a2:	4e 01       	movw	r8, r28
 1a4:	88 0c       	add	r8, r8
 1a6:	99 1c       	adc	r9, r9
 1a8:	d6 fd       	sbrc	r29, 6
 1aa:	4e c0       	rjmp	.+156    	; 0x248 <manchesterToString+0x104>
 1ac:	61 2c       	mov	r6, r1
 1ae:	71 2c       	mov	r7, r1
 1b0:	27 e0       	ldi	r18, 0x07	; 7
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	47 e0       	ldi	r20, 0x07	; 7
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	a0 e0       	ldi	r26, 0x00	; 0
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
			{
				manchesterPtr[i] |= (1 << z);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
	int z = 7;
	int p = 7;

	for (int j = 0; j <= (len * 2); j++)
	{
		unsigned char ch = toBeConverted[j];
 1c0:	f8 01       	movw	r30, r16
 1c2:	c1 91       	ld	r28, Z+
 1c4:	8f 01       	movw	r16, r30

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
		{
			if (ch == '\0')
 1c6:	c1 11       	cpse	r28, r1
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <manchesterToString+0x90>
			{
				manchesterPtr[i + 1] = '\0';
 1ca:	f6 01       	movw	r30, r12
 1cc:	ea 0f       	add	r30, r26
 1ce:	fb 1f       	adc	r31, r27
 1d0:	11 82       	std	Z+1, r1	; 0x01
				break;
 1d2:	2b c0       	rjmp	.+86     	; 0x22a <manchesterToString+0xe6>
	{
		unsigned char ch = toBeConverted[j];

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
		{
			if (ch == '\0')
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	70 e0       	ldi	r23, 0x00	; 0
			{
				z = 7;
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
 1d8:	ec 2f       	mov	r30, r28
 1da:	f0 e0       	ldi	r31, 0x00	; 0
			if (ch == '\0')
			{
				manchesterPtr[i + 1] = '\0';
				break;
			}
			if (p < 0)
 1dc:	33 23       	and	r19, r19
 1de:	14 f4       	brge	.+4      	; 0x1e4 <manchesterToString+0xa0>
			{
				p = 7;
 1e0:	27 e0       	ldi	r18, 0x07	; 7
 1e2:	30 e0       	ldi	r19, 0x00	; 0
			}
			if (z < 0)
 1e4:	55 23       	and	r21, r21
 1e6:	94 f5       	brge	.+100    	; 0x24c <manchesterToString+0x108>
			{
				z = 7;
				i++;
 1e8:	11 96       	adiw	r26, 0x01	; 1
				manchesterPtr[i] = '\0';
 1ea:	a6 01       	movw	r20, r12
 1ec:	4a 0f       	add	r20, r26
 1ee:	5b 1f       	adc	r21, r27
 1f0:	ea 01       	movw	r28, r20
 1f2:	18 82       	st	Y, r1
			{
				p = 7;
			}
			if (z < 0)
			{
				z = 7;
 1f4:	47 e0       	ldi	r20, 0x07	; 7
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	29 c0       	rjmp	.+82     	; 0x24c <manchesterToString+0x108>
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
			{
				manchesterPtr[i] |= (1 << z);
 1fa:	76 01       	movw	r14, r12
 1fc:	ea 0e       	add	r14, r26
 1fe:	fb 1e       	adc	r15, r27
 200:	5c 01       	movw	r10, r24
 202:	04 2e       	mov	r0, r20
 204:	02 c0       	rjmp	.+4      	; 0x20a <manchesterToString+0xc6>
 206:	aa 0c       	add	r10, r10
 208:	bb 1c       	adc	r11, r11
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <manchesterToString+0xc2>
 20e:	e7 01       	movw	r28, r14
 210:	b8 80       	ld	r11, Y
 212:	ab 28       	or	r10, r11
 214:	a8 82       	st	Y, r10
				z--;
 216:	41 50       	subi	r20, 0x01	; 1
 218:	51 09       	sbc	r21, r1
				p -= 2;
 21a:	22 50       	subi	r18, 0x02	; 2
 21c:	31 09       	sbc	r19, r1
 21e:	20 c0       	rjmp	.+64     	; 0x260 <manchesterToString+0x11c>
			}
			else /*if (ch & (0 << z) && (ch | (1 << z - 1)))*/
			{
				manchesterPtr[i] &= (255 - (0 << z));
				z--;
 220:	41 50       	subi	r20, 0x01	; 1
 222:	51 09       	sbc	r21, r1
				p -= 2;
 224:	22 50       	subi	r18, 0x02	; 2
 226:	31 09       	sbc	r19, r1
 228:	1b c0       	rjmp	.+54     	; 0x260 <manchesterToString+0x11c>
	}
	int i = 0;
	int z = 7;
	int p = 7;

	for (int j = 0; j <= (len * 2); j++)
 22a:	df ef       	ldi	r29, 0xFF	; 255
 22c:	6d 1a       	sub	r6, r29
 22e:	7d 0a       	sbc	r7, r29
 230:	86 14       	cp	r8, r6
 232:	97 04       	cpc	r9, r7
 234:	2c f6       	brge	.-118    	; 0x1c0 <manchesterToString+0x7c>
				z--;
				p -= 2;
			}
		}
	}
	return manchesterPtr;
 236:	8c 2d       	mov	r24, r12
 238:	9d 2d       	mov	r25, r13
 23a:	17 c0       	rjmp	.+46     	; 0x26a <manchesterToString+0x126>
	return manchesterPtr;													// Returnér manchesterkoden
}

unsigned char* manchesterToString(unsigned char* toBeConverted)
{
	if (toBeConverted == (unsigned char*)"") return 0;
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	14 c0       	rjmp	.+40     	; 0x26a <manchesterToString+0x126>
	int len = ((int)(strlen((char*)toBeConverted)) / 2);
	manchesterPtr = calloc((len+1), 1);
	if (manchesterPtr == (unsigned char*)"")
	{
		return '\0';
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	11 c0       	rjmp	.+34     	; 0x26a <manchesterToString+0x126>
				z--;
				p -= 2;
			}
		}
	}
	return manchesterPtr;
 248:	9d 2d       	mov	r25, r13
 24a:	0f c0       	rjmp	.+30     	; 0x26a <manchesterToString+0x126>
			{
				z = 7;
				i++;
				manchesterPtr[i] = '\0';
			}
			if (ch & (1 << p) && (ch | (0 << (p - 1))))
 24c:	7f 01       	movw	r14, r30
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <manchesterToString+0x112>
 252:	f5 94       	asr	r15
 254:	e7 94       	ror	r14
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <manchesterToString+0x10e>
 25a:	e0 fe       	sbrs	r14, 0
 25c:	e1 cf       	rjmp	.-62     	; 0x220 <manchesterToString+0xdc>
 25e:	cd cf       	rjmp	.-102    	; 0x1fa <manchesterToString+0xb6>
 260:	61 50       	subi	r22, 0x01	; 1
 262:	71 09       	sbc	r23, r1

	for (int j = 0; j <= (len * 2); j++)
	{
		unsigned char ch = toBeConverted[j];

		for (int timestocheck = 0; timestocheck <= 3; timestocheck++)
 264:	09 f0       	breq	.+2      	; 0x268 <manchesterToString+0x124>
 266:	ba cf       	rjmp	.-140    	; 0x1dc <manchesterToString+0x98>
 268:	e0 cf       	rjmp	.-64     	; 0x22a <manchesterToString+0xe6>
				p -= 2;
			}
		}
	}
	return manchesterPtr;
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	bf 90       	pop	r11
 27c:	af 90       	pop	r10
 27e:	9f 90       	pop	r9
 280:	8f 90       	pop	r8
 282:	7f 90       	pop	r7
 284:	6f 90       	pop	r6
 286:	08 95       	ret

00000288 <InitUART>:
  // Wait for new character received
  while ( (UCSR0A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR0;
}
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	52 2f       	mov	r21, r18
 28e:	8b 01       	movw	r16, r22
 290:	9c 01       	movw	r18, r24
 292:	0c 52       	subi	r16, 0x2C	; 44
 294:	11 40       	sbci	r17, 0x01	; 1
 296:	21 09       	sbc	r18, r1
 298:	31 09       	sbc	r19, r1
 29a:	05 3d       	cpi	r16, 0xD5	; 213
 29c:	10 4c       	sbci	r17, 0xC0	; 192
 29e:	21 40       	sbci	r18, 0x01	; 1
 2a0:	31 05       	cpc	r19, r1
 2a2:	d0 f5       	brcc	.+116    	; 0x318 <InitUART+0x90>
 2a4:	45 50       	subi	r20, 0x05	; 5
 2a6:	44 30       	cpi	r20, 0x04	; 4
 2a8:	b8 f5       	brcc	.+110    	; 0x318 <InitUART+0x90>
 2aa:	20 e2       	ldi	r18, 0x20	; 32
 2ac:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 2b0:	28 e1       	ldi	r18, 0x18	; 24
 2b2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 2b6:	44 0f       	add	r20, r20
 2b8:	40 93 c2 00 	sts	0x00C2, r20	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 2bc:	55 34       	cpi	r21, 0x45	; 69
 2be:	31 f4       	brne	.+12     	; 0x2cc <InitUART+0x44>
 2c0:	e2 ec       	ldi	r30, 0xC2	; 194
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	20 81       	ld	r18, Z
 2c6:	20 62       	ori	r18, 0x20	; 32
 2c8:	20 83       	st	Z, r18
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <InitUART+0x52>
 2cc:	5f 34       	cpi	r21, 0x4F	; 79
 2ce:	29 f4       	brne	.+10     	; 0x2da <InitUART+0x52>
 2d0:	e2 ec       	ldi	r30, 0xC2	; 194
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	20 81       	ld	r18, Z
 2d6:	20 63       	ori	r18, 0x30	; 48
 2d8:	20 83       	st	Z, r18
 2da:	dc 01       	movw	r26, r24
 2dc:	cb 01       	movw	r24, r22
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	aa 1f       	adc	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	aa 1f       	adc	r26, r26
 2ec:	bb 1f       	adc	r27, r27
 2ee:	9c 01       	movw	r18, r24
 2f0:	ad 01       	movw	r20, r26
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	44 1f       	adc	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	44 1f       	adc	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	74 e2       	ldi	r23, 0x24	; 36
 306:	84 ef       	ldi	r24, 0xF4	; 244
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	05 d1       	rcall	.+522    	; 0x516 <__udivmodsi4>
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	31 09       	sbc	r19, r1
 310:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 314:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR0A & (1<<5)) == 0 )
 31e:	e0 ec       	ldi	r30, 0xC0	; 192
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	90 81       	ld	r25, Z
 324:	95 ff       	sbrs	r25, 5
 326:	fd cf       	rjmp	.-6      	; 0x322 <SendChar+0x4>
  {}
  // Then send the character
  UDR0 = Tegn;
 328:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 32c:	08 95       	ret

0000032e <SendString>:
Sends 0 terminated string.
Parameter:
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	ec 01       	movw	r28, r24
  // Repeat until zero-termination
  while (*Streng != 0)
 334:	88 81       	ld	r24, Y
 336:	88 23       	and	r24, r24
 338:	29 f0       	breq	.+10     	; 0x344 <SendString+0x16>
  {
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
 33a:	21 96       	adiw	r28, 0x01	; 1
   Streng: Pointer to the string. 
*************************************************************************/
void SendString(char* Streng)
{
  // Repeat until zero-termination
  while (*Streng != 0)
 33c:	f0 df       	rcall	.-32     	; 0x31e <SendChar>
 33e:	89 91       	ld	r24, Y+
 340:	81 11       	cpse	r24, r1
    // Send the character pointed to by "Streng"
    SendChar(*Streng);
    // Advance the pointer one step
    Streng++;
  }
}
 342:	fc cf       	rjmp	.-8      	; 0x33c <SendString+0xe>
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <start1msDelay>:
}

void start1msDelay()
{
	// Timer3: Normal mode, PS = 0
	TCCR3A = 0b00000000;
 34a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0b00000001;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	// Overflow hvert MS.
	//Sæt timerStatus til '1' (=going)
	//timerStatus_3 = '1';
	TCNT3 = (0xFFFF-16000);
 354:	8f e7       	ldi	r24, 0x7F	; 127
 356:	91 ec       	ldi	r25, 0xC1	; 193
 358:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
 35c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
	while ((TIFR3 & (1<<0)) == 0)
 360:	c0 9b       	sbis	0x18, 0	; 24
 362:	fe cf       	rjmp	.-4      	; 0x360 <start1msDelay+0x16>
	{}
	TCCR3B = 0;
 364:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	TIFR3 = 1<<0;
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	88 bb       	out	0x18, r24	; 24
 36c:	08 95       	ret

0000036e <start400usDelay>:
}

void start400usDelay()
{
	// Timer4: Normal mode, PS = 0
	TCCR4A = 0b00000000;
 36e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = 0b00000001;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	// Overflow hvert MS.
	//Sæt timerStatus til '1' (=going)
	//timerStatus_3 = '1';
	TCNT4 = 63936;
 378:	80 ec       	ldi	r24, 0xC0	; 192
 37a:	99 ef       	ldi	r25, 0xF9	; 249
 37c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
 380:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
	while ((TIFR4 & (1<<0)) == 0)
 384:	c8 9b       	sbis	0x19, 0	; 25
 386:	fe cf       	rjmp	.-4      	; 0x384 <start400usDelay+0x16>
	{}
	TCCR4B = 0;
 388:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	TIFR4 = 1<<0;
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	89 bb       	out	0x19, r24	; 25
 390:	08 95       	ret

00000392 <ventPaaZC>:
return receive;
}

void ventPaaZC()
{
	ZCDetected_ = 0;
 392:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <ZCDetected_+0x1>
 396:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <ZCDetected_>
	while(ZCDetected_ == 0)	{}
 39a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <ZCDetected_>
 39e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <ZCDetected_+0x1>
 3a2:	89 2b       	or	r24, r25
 3a4:	d1 f3       	breq	.-12     	; 0x39a <ventPaaZC+0x8>
}
 3a6:	08 95       	ret

000003a8 <receiveBurst>:
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	87 e0       	ldi	r24, 0x07	; 7
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <j+0x1>
 3b8:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <j>
 3bc:	04 e1       	ldi	r16, 0x14	; 20
 3be:	12 e0       	ldi	r17, 0x02	; 2
 3c0:	c1 e0       	ldi	r28, 0x01	; 1
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
 3c4:	d4 df       	rcall	.-88     	; 0x36e <start400usDelay>
 3c6:	7f 9b       	sbis	0x0f, 7	; 15
 3c8:	0e c0       	rjmp	.+28     	; 0x3e6 <receiveBurst+0x3e>
 3ca:	ce 01       	movw	r24, r28
 3cc:	f8 01       	movw	r30, r16
 3ce:	00 80       	ld	r0, Z
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <receiveBurst+0x2e>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <receiveBurst+0x2a>
 3da:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <firstByteReceived>
 3de:	89 2b       	or	r24, r25
 3e0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <firstByteReceived>
 3e4:	0e c0       	rjmp	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e6:	ce 01       	movw	r24, r28
 3e8:	f8 01       	movw	r30, r16
 3ea:	00 80       	ld	r0, Z
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <receiveBurst+0x4a>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <receiveBurst+0x46>
 3f6:	80 95       	com	r24
 3f8:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <firstByteReceived>
 3fc:	89 23       	and	r24, r25
 3fe:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <firstByteReceived>
 402:	c7 df       	rcall	.-114    	; 0x392 <ventPaaZC>
 404:	a2 df       	rcall	.-188    	; 0x34a <start1msDelay>
 406:	a1 df       	rcall	.-190    	; 0x34a <start1msDelay>
 408:	b2 df       	rcall	.-156    	; 0x36e <start400usDelay>
 40a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <j>
 40e:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <j+0x1>
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <j+0x1>
 418:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <j>
 41c:	99 23       	and	r25, r25
 41e:	94 f6       	brge	.-92     	; 0x3c4 <receiveBurst+0x1c>
 420:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <firstByteReceived>
 424:	8e 3e       	cpi	r24, 0xEE	; 238
 426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 428:	54 c0       	rjmp	.+168    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 42a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <i+0x1>
 42e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <i>
 432:	07 e0       	ldi	r16, 0x07	; 7
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	c1 e0       	ldi	r28, 0x01	; 1
 438:	d0 e0       	ldi	r29, 0x00	; 0
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 43c:	04 97       	sbiw	r24, 0x04	; 4
 43e:	19 f4       	brne	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 440:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <receive+0x4>
 444:	46 c0       	rjmp	.+140    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 446:	00 93 14 02 	sts	0x0214, r16	; 0x800214 <j>
 44a:	10 93 15 02 	sts	0x0215, r17	; 0x800215 <j+0x1>
 44e:	80 2f       	mov	r24, r16
 450:	7f 9b       	sbis	0x0f, 7	; 15
 452:	11 c0       	rjmp	.+34     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 454:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <i>
 458:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <i+0x1>
 45c:	e5 5f       	subi	r30, 0xF5	; 245
 45e:	fd 4f       	sbci	r31, 0xFD	; 253
 460:	9e 01       	movw	r18, r28
 462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	8a 95       	dec	r24
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	c9 01       	movw	r24, r18
 46e:	90 81       	ld	r25, Z
 470:	89 2b       	or	r24, r25
 472:	80 83       	st	Z, r24
 474:	11 c0       	rjmp	.+34     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 476:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <i>
 47a:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <i+0x1>
 47e:	e5 5f       	subi	r30, 0xF5	; 245
 480:	fd 4f       	sbci	r31, 0xFD	; 253
 482:	9e 01       	movw	r18, r28
 484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 486:	22 0f       	add	r18, r18
 488:	33 1f       	adc	r19, r19
 48a:	8a 95       	dec	r24
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	c9 01       	movw	r24, r18
 490:	80 95       	com	r24
 492:	90 81       	ld	r25, Z
 494:	89 23       	and	r24, r25
 496:	80 83       	st	Z, r24
 498:	7c df       	rcall	.-264    	; 0x392 <ventPaaZC>
 49a:	57 df       	rcall	.-338    	; 0x34a <start1msDelay>
 49c:	56 df       	rcall	.-340    	; 0x34a <start1msDelay>
 49e:	67 df       	rcall	.-306    	; 0x36e <start400usDelay>
 4a0:	66 df       	rcall	.-308    	; 0x36e <start400usDelay>
 4a2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <j>
 4a6:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <j+0x1>
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <j+0x1>
 4b0:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <j>
 4b4:	99 23       	and	r25, r25
 4b6:	64 f6       	brge	.-104    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 4b8:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <i>
 4bc:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <i+0x1>
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <i+0x1>
 4c6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <i>
 4ca:	85 30       	cpi	r24, 0x05	; 5
 4cc:	91 05       	cpc	r25, r1
 4ce:	0c f4       	brge	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d0:	b5 cf       	rjmp	.-150    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 4d2:	8b e0       	ldi	r24, 0x0B	; 11
 4d4:	92 e0       	ldi	r25, 0x02	; 2
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	08 95       	ret

000004e0 <initZCDetector>:
 void initZCDetector()
 {
	 //------------------------------------//
	 //			 interrupt test			  //
	 //------------------------------------//
	 DDRD &= ~(1 << 0);
 4e0:	50 98       	cbi	0x0a, 0	; 10
	 // PD2 (PCINT0 pin) is now an input
	 PORTD |= (1 << 0);
 4e2:	58 9a       	sbi	0x0b, 0	; 11
	 // PD2 is now an input with pull-up enabled
	 //EICRA |= (1 << ISC11) | (1 << ISC10);   // set INT0 to trigger on ANY logic change
	 EICRA = 0b00000011;
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x700069>
	 EIMSK |= (1 << 0);
 4ea:	e8 9a       	sbi	0x1d, 0	; 29
 4ec:	08 95       	ret

000004ee <__vector_1>:

 }

 // Interrupt service routine for INT0 (Er INT3 for Atmega 2560)
 ISR(INT0_vect)
 {
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
	 ZCDetected_ = 1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <ZCDetected_+0x1>
 504:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <ZCDetected_>
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	0f 90       	pop	r0
 50e:	0f be       	out	0x3f, r0	; 63
 510:	0f 90       	pop	r0
 512:	1f 90       	pop	r1
 514:	18 95       	reti

00000516 <__udivmodsi4>:
 516:	a1 e2       	ldi	r26, 0x21	; 33
 518:	1a 2e       	mov	r1, r26
 51a:	aa 1b       	sub	r26, r26
 51c:	bb 1b       	sub	r27, r27
 51e:	fd 01       	movw	r30, r26
 520:	0d c0       	rjmp	.+26     	; 0x53c <__udivmodsi4_ep>

00000522 <__udivmodsi4_loop>:
 522:	aa 1f       	adc	r26, r26
 524:	bb 1f       	adc	r27, r27
 526:	ee 1f       	adc	r30, r30
 528:	ff 1f       	adc	r31, r31
 52a:	a2 17       	cp	r26, r18
 52c:	b3 07       	cpc	r27, r19
 52e:	e4 07       	cpc	r30, r20
 530:	f5 07       	cpc	r31, r21
 532:	20 f0       	brcs	.+8      	; 0x53c <__udivmodsi4_ep>
 534:	a2 1b       	sub	r26, r18
 536:	b3 0b       	sbc	r27, r19
 538:	e4 0b       	sbc	r30, r20
 53a:	f5 0b       	sbc	r31, r21

0000053c <__udivmodsi4_ep>:
 53c:	66 1f       	adc	r22, r22
 53e:	77 1f       	adc	r23, r23
 540:	88 1f       	adc	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	1a 94       	dec	r1
 546:	69 f7       	brne	.-38     	; 0x522 <__udivmodsi4_loop>
 548:	60 95       	com	r22
 54a:	70 95       	com	r23
 54c:	80 95       	com	r24
 54e:	90 95       	com	r25
 550:	9b 01       	movw	r18, r22
 552:	ac 01       	movw	r20, r24
 554:	bd 01       	movw	r22, r26
 556:	cf 01       	movw	r24, r30
 558:	08 95       	ret

0000055a <calloc>:
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	86 9f       	mul	r24, r22
 564:	80 01       	movw	r16, r0
 566:	87 9f       	mul	r24, r23
 568:	10 0d       	add	r17, r0
 56a:	96 9f       	mul	r25, r22
 56c:	10 0d       	add	r17, r0
 56e:	11 24       	eor	r1, r1
 570:	c8 01       	movw	r24, r16
 572:	0d d0       	rcall	.+26     	; 0x58e <malloc>
 574:	ec 01       	movw	r28, r24
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	21 f0       	breq	.+8      	; 0x582 <calloc+0x28>
 57a:	a8 01       	movw	r20, r16
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	27 d1       	rcall	.+590    	; 0x7d0 <memset>
 582:	ce 01       	movw	r24, r28
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	08 95       	ret

0000058e <malloc>:
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	82 30       	cpi	r24, 0x02	; 2
 598:	91 05       	cpc	r25, r1
 59a:	10 f4       	brcc	.+4      	; 0x5a0 <malloc+0x12>
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__flp>
 5a4:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <__flp+0x1>
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	a0 e0       	ldi	r26, 0x00	; 0
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	30 97       	sbiw	r30, 0x00	; 0
 5b2:	19 f1       	breq	.+70     	; 0x5fa <malloc+0x6c>
 5b4:	40 81       	ld	r20, Z
 5b6:	51 81       	ldd	r21, Z+1	; 0x01
 5b8:	02 81       	ldd	r16, Z+2	; 0x02
 5ba:	13 81       	ldd	r17, Z+3	; 0x03
 5bc:	48 17       	cp	r20, r24
 5be:	59 07       	cpc	r21, r25
 5c0:	c8 f0       	brcs	.+50     	; 0x5f4 <malloc+0x66>
 5c2:	84 17       	cp	r24, r20
 5c4:	95 07       	cpc	r25, r21
 5c6:	69 f4       	brne	.+26     	; 0x5e2 <malloc+0x54>
 5c8:	10 97       	sbiw	r26, 0x00	; 0
 5ca:	31 f0       	breq	.+12     	; 0x5d8 <malloc+0x4a>
 5cc:	12 96       	adiw	r26, 0x02	; 2
 5ce:	0c 93       	st	X, r16
 5d0:	12 97       	sbiw	r26, 0x02	; 2
 5d2:	13 96       	adiw	r26, 0x03	; 3
 5d4:	1c 93       	st	X, r17
 5d6:	27 c0       	rjmp	.+78     	; 0x626 <malloc+0x98>
 5d8:	00 93 1c 02 	sts	0x021C, r16	; 0x80021c <__flp>
 5dc:	10 93 1d 02 	sts	0x021D, r17	; 0x80021d <__flp+0x1>
 5e0:	22 c0       	rjmp	.+68     	; 0x626 <malloc+0x98>
 5e2:	21 15       	cp	r18, r1
 5e4:	31 05       	cpc	r19, r1
 5e6:	19 f0       	breq	.+6      	; 0x5ee <malloc+0x60>
 5e8:	42 17       	cp	r20, r18
 5ea:	53 07       	cpc	r21, r19
 5ec:	18 f4       	brcc	.+6      	; 0x5f4 <malloc+0x66>
 5ee:	9a 01       	movw	r18, r20
 5f0:	bd 01       	movw	r22, r26
 5f2:	ef 01       	movw	r28, r30
 5f4:	df 01       	movw	r26, r30
 5f6:	f8 01       	movw	r30, r16
 5f8:	db cf       	rjmp	.-74     	; 0x5b0 <malloc+0x22>
 5fa:	21 15       	cp	r18, r1
 5fc:	31 05       	cpc	r19, r1
 5fe:	f9 f0       	breq	.+62     	; 0x63e <malloc+0xb0>
 600:	28 1b       	sub	r18, r24
 602:	39 0b       	sbc	r19, r25
 604:	24 30       	cpi	r18, 0x04	; 4
 606:	31 05       	cpc	r19, r1
 608:	80 f4       	brcc	.+32     	; 0x62a <malloc+0x9c>
 60a:	8a 81       	ldd	r24, Y+2	; 0x02
 60c:	9b 81       	ldd	r25, Y+3	; 0x03
 60e:	61 15       	cp	r22, r1
 610:	71 05       	cpc	r23, r1
 612:	21 f0       	breq	.+8      	; 0x61c <malloc+0x8e>
 614:	fb 01       	movw	r30, r22
 616:	93 83       	std	Z+3, r25	; 0x03
 618:	82 83       	std	Z+2, r24	; 0x02
 61a:	04 c0       	rjmp	.+8      	; 0x624 <malloc+0x96>
 61c:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <__flp+0x1>
 620:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__flp>
 624:	fe 01       	movw	r30, r28
 626:	32 96       	adiw	r30, 0x02	; 2
 628:	44 c0       	rjmp	.+136    	; 0x6b2 <malloc+0x124>
 62a:	fe 01       	movw	r30, r28
 62c:	e2 0f       	add	r30, r18
 62e:	f3 1f       	adc	r31, r19
 630:	81 93       	st	Z+, r24
 632:	91 93       	st	Z+, r25
 634:	22 50       	subi	r18, 0x02	; 2
 636:	31 09       	sbc	r19, r1
 638:	39 83       	std	Y+1, r19	; 0x01
 63a:	28 83       	st	Y, r18
 63c:	3a c0       	rjmp	.+116    	; 0x6b2 <malloc+0x124>
 63e:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 642:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 646:	23 2b       	or	r18, r19
 648:	41 f4       	brne	.+16     	; 0x65a <malloc+0xcc>
 64a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 64e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 652:	30 93 1b 02 	sts	0x021B, r19	; 0x80021b <__brkval+0x1>
 656:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <__brkval>
 65a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 65e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 662:	21 15       	cp	r18, r1
 664:	31 05       	cpc	r19, r1
 666:	41 f4       	brne	.+16     	; 0x678 <malloc+0xea>
 668:	2d b7       	in	r18, 0x3d	; 61
 66a:	3e b7       	in	r19, 0x3e	; 62
 66c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 670:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 674:	24 1b       	sub	r18, r20
 676:	35 0b       	sbc	r19, r21
 678:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__brkval>
 67c:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__brkval+0x1>
 680:	e2 17       	cp	r30, r18
 682:	f3 07       	cpc	r31, r19
 684:	a0 f4       	brcc	.+40     	; 0x6ae <malloc+0x120>
 686:	2e 1b       	sub	r18, r30
 688:	3f 0b       	sbc	r19, r31
 68a:	28 17       	cp	r18, r24
 68c:	39 07       	cpc	r19, r25
 68e:	78 f0       	brcs	.+30     	; 0x6ae <malloc+0x120>
 690:	ac 01       	movw	r20, r24
 692:	4e 5f       	subi	r20, 0xFE	; 254
 694:	5f 4f       	sbci	r21, 0xFF	; 255
 696:	24 17       	cp	r18, r20
 698:	35 07       	cpc	r19, r21
 69a:	48 f0       	brcs	.+18     	; 0x6ae <malloc+0x120>
 69c:	4e 0f       	add	r20, r30
 69e:	5f 1f       	adc	r21, r31
 6a0:	50 93 1b 02 	sts	0x021B, r21	; 0x80021b <__brkval+0x1>
 6a4:	40 93 1a 02 	sts	0x021A, r20	; 0x80021a <__brkval>
 6a8:	81 93       	st	Z+, r24
 6aa:	91 93       	st	Z+, r25
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <malloc+0x124>
 6ae:	e0 e0       	ldi	r30, 0x00	; 0
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	cf 01       	movw	r24, r30
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	08 95       	ret

000006be <free>:
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	00 97       	sbiw	r24, 0x00	; 0
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <free+0xa>
 6c6:	81 c0       	rjmp	.+258    	; 0x7ca <free+0x10c>
 6c8:	fc 01       	movw	r30, r24
 6ca:	32 97       	sbiw	r30, 0x02	; 2
 6cc:	13 82       	std	Z+3, r1	; 0x03
 6ce:	12 82       	std	Z+2, r1	; 0x02
 6d0:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <__flp>
 6d4:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <__flp+0x1>
 6d8:	10 97       	sbiw	r26, 0x00	; 0
 6da:	81 f4       	brne	.+32     	; 0x6fc <free+0x3e>
 6dc:	20 81       	ld	r18, Z
 6de:	31 81       	ldd	r19, Z+1	; 0x01
 6e0:	82 0f       	add	r24, r18
 6e2:	93 1f       	adc	r25, r19
 6e4:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 6e8:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 6ec:	28 17       	cp	r18, r24
 6ee:	39 07       	cpc	r19, r25
 6f0:	51 f5       	brne	.+84     	; 0x746 <free+0x88>
 6f2:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__brkval+0x1>
 6f6:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__brkval>
 6fa:	67 c0       	rjmp	.+206    	; 0x7ca <free+0x10c>
 6fc:	ed 01       	movw	r28, r26
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	ce 17       	cp	r28, r30
 704:	df 07       	cpc	r29, r31
 706:	40 f4       	brcc	.+16     	; 0x718 <free+0x5a>
 708:	4a 81       	ldd	r20, Y+2	; 0x02
 70a:	5b 81       	ldd	r21, Y+3	; 0x03
 70c:	9e 01       	movw	r18, r28
 70e:	41 15       	cp	r20, r1
 710:	51 05       	cpc	r21, r1
 712:	f1 f0       	breq	.+60     	; 0x750 <free+0x92>
 714:	ea 01       	movw	r28, r20
 716:	f5 cf       	rjmp	.-22     	; 0x702 <free+0x44>
 718:	d3 83       	std	Z+3, r29	; 0x03
 71a:	c2 83       	std	Z+2, r28	; 0x02
 71c:	40 81       	ld	r20, Z
 71e:	51 81       	ldd	r21, Z+1	; 0x01
 720:	84 0f       	add	r24, r20
 722:	95 1f       	adc	r25, r21
 724:	c8 17       	cp	r28, r24
 726:	d9 07       	cpc	r29, r25
 728:	59 f4       	brne	.+22     	; 0x740 <free+0x82>
 72a:	88 81       	ld	r24, Y
 72c:	99 81       	ldd	r25, Y+1	; 0x01
 72e:	84 0f       	add	r24, r20
 730:	95 1f       	adc	r25, r21
 732:	02 96       	adiw	r24, 0x02	; 2
 734:	91 83       	std	Z+1, r25	; 0x01
 736:	80 83       	st	Z, r24
 738:	8a 81       	ldd	r24, Y+2	; 0x02
 73a:	9b 81       	ldd	r25, Y+3	; 0x03
 73c:	93 83       	std	Z+3, r25	; 0x03
 73e:	82 83       	std	Z+2, r24	; 0x02
 740:	21 15       	cp	r18, r1
 742:	31 05       	cpc	r19, r1
 744:	29 f4       	brne	.+10     	; 0x750 <free+0x92>
 746:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <__flp+0x1>
 74a:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <__flp>
 74e:	3d c0       	rjmp	.+122    	; 0x7ca <free+0x10c>
 750:	e9 01       	movw	r28, r18
 752:	fb 83       	std	Y+3, r31	; 0x03
 754:	ea 83       	std	Y+2, r30	; 0x02
 756:	49 91       	ld	r20, Y+
 758:	59 91       	ld	r21, Y+
 75a:	c4 0f       	add	r28, r20
 75c:	d5 1f       	adc	r29, r21
 75e:	ec 17       	cp	r30, r28
 760:	fd 07       	cpc	r31, r29
 762:	61 f4       	brne	.+24     	; 0x77c <free+0xbe>
 764:	80 81       	ld	r24, Z
 766:	91 81       	ldd	r25, Z+1	; 0x01
 768:	84 0f       	add	r24, r20
 76a:	95 1f       	adc	r25, r21
 76c:	02 96       	adiw	r24, 0x02	; 2
 76e:	e9 01       	movw	r28, r18
 770:	99 83       	std	Y+1, r25	; 0x01
 772:	88 83       	st	Y, r24
 774:	82 81       	ldd	r24, Z+2	; 0x02
 776:	93 81       	ldd	r25, Z+3	; 0x03
 778:	9b 83       	std	Y+3, r25	; 0x03
 77a:	8a 83       	std	Y+2, r24	; 0x02
 77c:	e0 e0       	ldi	r30, 0x00	; 0
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	12 96       	adiw	r26, 0x02	; 2
 782:	8d 91       	ld	r24, X+
 784:	9c 91       	ld	r25, X
 786:	13 97       	sbiw	r26, 0x03	; 3
 788:	00 97       	sbiw	r24, 0x00	; 0
 78a:	19 f0       	breq	.+6      	; 0x792 <free+0xd4>
 78c:	fd 01       	movw	r30, r26
 78e:	dc 01       	movw	r26, r24
 790:	f7 cf       	rjmp	.-18     	; 0x780 <free+0xc2>
 792:	8d 91       	ld	r24, X+
 794:	9c 91       	ld	r25, X
 796:	11 97       	sbiw	r26, 0x01	; 1
 798:	9d 01       	movw	r18, r26
 79a:	2e 5f       	subi	r18, 0xFE	; 254
 79c:	3f 4f       	sbci	r19, 0xFF	; 255
 79e:	82 0f       	add	r24, r18
 7a0:	93 1f       	adc	r25, r19
 7a2:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__brkval>
 7a6:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <__brkval+0x1>
 7aa:	28 17       	cp	r18, r24
 7ac:	39 07       	cpc	r19, r25
 7ae:	69 f4       	brne	.+26     	; 0x7ca <free+0x10c>
 7b0:	30 97       	sbiw	r30, 0x00	; 0
 7b2:	29 f4       	brne	.+10     	; 0x7be <free+0x100>
 7b4:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__flp+0x1>
 7b8:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__flp>
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <free+0x104>
 7be:	13 82       	std	Z+3, r1	; 0x03
 7c0:	12 82       	std	Z+2, r1	; 0x02
 7c2:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <__brkval+0x1>
 7c6:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <__brkval>
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	08 95       	ret

000007d0 <memset>:
 7d0:	dc 01       	movw	r26, r24
 7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <memset+0x6>
 7d4:	6d 93       	st	X+, r22
 7d6:	41 50       	subi	r20, 0x01	; 1
 7d8:	50 40       	sbci	r21, 0x00	; 0
 7da:	e0 f7       	brcc	.-8      	; 0x7d4 <memset+0x4>
 7dc:	08 95       	ret

000007de <_exit>:
 7de:	f8 94       	cli

000007e0 <__stop_program>:
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <__stop_program>
